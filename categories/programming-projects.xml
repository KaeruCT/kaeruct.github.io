<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Pejibaye Blog (programming-projects)</title><link>http://kaeruct.github.io/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://kaeruct.github.io/categories/programming-projects.xml"></atom:link><language>en</language><lastBuildDate>Wed, 11 May 2016 23:10:16 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Go Learn</title><link>http://kaeruct.github.io/posts/go-learn.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;Today I decided to try out &lt;a href="http://golang.org/"&gt;Go&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;What is Go?&lt;/h3&gt;
&lt;p&gt;Go is a programming language designed and developed at Google.
It was designed by really smart people: Robert Griesemer,
Rob Pike, and Ken Thompson.&lt;/p&gt;
&lt;p&gt;Syntax-wise, it looks a lot like C, except the ending semicolons
are optional, and parentheses for &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, etc are not required.&lt;/p&gt;
&lt;p&gt;Here's a gist showing some syntax:
&lt;script src="https://gist.github.com/KaeruCT/6488745.js"&gt;&lt;/script&gt;
It's a fibonacci calculator made using a closure, caching previously calculated numbers.&lt;/p&gt;
&lt;h3&gt;Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Statically typed (but types can be inferred).&lt;/li&gt;
&lt;li&gt;Concurrency baked in (goroutines, channels).&lt;/li&gt;
&lt;li&gt;Garbage collection.&lt;/li&gt;
&lt;li&gt;Fast compile times.&lt;/li&gt;
&lt;li&gt;No classes (you attach functions to structs instead).&lt;/li&gt;
&lt;li&gt;No inheritance (Go makes heavy use of interfaces).&lt;/li&gt;
&lt;li&gt;No overloading.&lt;/li&gt;
&lt;li&gt;No pointer arithmetic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Coding in Go&lt;/h3&gt;
&lt;p&gt;To learn Go, I first did a quick read of
&lt;a href="http://learnxinyminutes.com/docs/go/"&gt;Learn X in Y Minutes&lt;/a&gt; to get
a grip of the syntax.&lt;/p&gt;
&lt;p&gt;Then, I went over to their official website and took the &lt;a href="http://tour.golang.org/"&gt;tour&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Afterwards, I wanted to get a working application. Go includes an
http server in their official packages, so I decided to make a
web application.&lt;/p&gt;
&lt;p&gt;After a little searching, I found they had a &lt;a href="http://golang.org/doc/articles/wiki/"&gt;tutorial&lt;/a&gt;
aimed at web applications, so I decided to use exactly that.
Go documentation rocks!&lt;/p&gt;
&lt;p&gt;I followed the tutorial along and was able to get a wiki type of website
up and running in about 20 minutes. After that, I decided I wanted
to add markdown support to it, and a few more features, like creating
new pages and deleting pages.&lt;/p&gt;
&lt;p&gt;One thing I really liked about Go is that it comes with a lot of useful packages
so you can start working right away. For example, I thought I would have
to write some sort of templating system, but Go already comes with one.
And it's context aware! So you don't have to worry about escaping things!&lt;/p&gt;
&lt;h3&gt;Packages&lt;/h3&gt;
&lt;p&gt;Go's packaging system allows you to get packages from VCS repositories.
For example, to add markdown support to my wiki, I added
&lt;a href="https://github.com/knieriem/markdown"&gt;knieriem's markdown package&lt;/a&gt; as a git
submodule in my project.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kaeruct.github.io/galleries/learning-go/"&gt;
    &lt;img width="540px" class="thumbnail" src="http://kaeruct.github.io/galleries/learning-go/learning-go1.png"&gt;
    &lt;center&gt;A screenshot of my development process. Click to see the gallery.&lt;/center&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As usual, my project is on &lt;a href="https://github.com/KaeruCT/go-learn"&gt;Github&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>golang</category><category>programming-projects</category><guid>http://kaeruct.github.io/posts/go-learn.html</guid><pubDate>Sun, 08 Sep 2013 22:33:11 GMT</pubDate></item><item><title>Trying out Ruby on Rails</title><link>http://kaeruct.github.io/posts/trying-out-ruby-on-rails.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;I've heard a lot of stuff about RoR for a while, so I decided to finally
try it out and see what all the fuss is about.&lt;/p&gt;
&lt;p&gt;What is Ruby on Rails? A web framework that runs on the Ruby programming language.&lt;/p&gt;
&lt;p&gt;First impressions: too much magic going on. It seems like a good thing for quick
development, but I prefer knowing exactly what is going on in case anything
goes wrong so the problem can be fixed easily. For this reason, I probably will not use RoR
on any on my projects until I understand more about it.&lt;/p&gt;
&lt;p&gt;Things I liked about RoR: the ActiveRecord ORM, and the built-in REST support.
I also liked that it is very easy to deploy once you know what you're doing.&lt;/p&gt;
&lt;p&gt;Thinks I dislike so far: using SCSS and Coffeescript by default.
These could add to the cognitive load of beginner, and they have to wrap their
head around how RoR first has to process these files into what the browser
can understand (CSS y JavaScript, respectively).&lt;/p&gt;
&lt;p&gt;I've never been a big fan of Coffeescript. I think it's annoying to debug
and I would rather write plain JavaScript, but that's just my opinion. However, I do think
it has a nice syntax.&lt;/p&gt;
&lt;p&gt;I had heard of SCSS, but I had never used it. It's very enjoyable to use, since you
can nest CSS definitions, and it has some neat features that make it a lot easier
to maintain stylesheets, such as variables and functions.&lt;/p&gt;
&lt;p&gt;When learning a new framework, I try to follow the official tutorial,
but tweaking the steps a bit in order to create a different application.&lt;/p&gt;
&lt;p&gt;To learn RoR, I decided to make a small contacts application, where you can add contacts to a list
and edit/delete them. &lt;a href="https://github.com/KaeruCT/learning-rails-contacts-app"&gt;It's on a repo at Github&lt;/a&gt;,
in case you wanna take a look.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kaeruct.github.io/galleries/learning-rails/"&gt;
    &lt;img width="540px" class="thumbnail" src="http://kaeruct.github.io/galleries/learning-rails/screenshot.png"&gt;
    &lt;center&gt;A screenshot of my development process. Click to see the gallery.&lt;/center&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now I'm also learning Django (a python web framework), and everything seems a lot less magical,
so I will probably use it instead of RoR.
Both of them seem to solve the same problem (CRUD apps).&lt;/p&gt;&lt;/div&gt;</description><category>programming-projects</category><category>ruby</category><guid>http://kaeruct.github.io/posts/trying-out-ruby-on-rails.html</guid><pubDate>Sun, 30 Jun 2013 06:21:53 GMT</pubDate></item><item><title>Project Euler</title><link>http://kaeruct.github.io/posts/project-euler.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;I started doing the &lt;a href="http://projecteuler.net/"&gt;Project Euler problems&lt;/a&gt;
last weekend. So far managed to get to problem 10.&lt;/p&gt;
&lt;p&gt;I have realized how much I suck at math, and now I want to learn more.
I know people with knowledge in math will probably laugh at my solutions,
I really feel like I half-assed most of them so far.&lt;/p&gt;
&lt;p&gt;Those with knowledge in math will probably find the problems easier than
those with knowledge only in programming... Being good at math makes you
a better programmer.&lt;/p&gt;
&lt;p&gt;Did I mention I'm trying to program the solution to each problem in a
different programming language? Last one I used was pascal. Never had used
it before. It's a horrible language, I'm glad I don't have to use it ever
again for anything.&lt;/p&gt;
&lt;p&gt;By the way, every time I solve a problem I will updated my github repo.
&lt;a href="https://github.com/KaeruCT/project-euler"&gt;Check it out here&lt;/a&gt;. Feel free
to critique!&lt;/p&gt;&lt;/div&gt;</description><category>math</category><category>programming-projects</category><guid>http://kaeruct.github.io/posts/project-euler.html</guid><pubDate>Wed, 13 Mar 2013 02:01:25 GMT</pubDate></item><item><title>Rainbow Tunnel</title><link>http://kaeruct.github.io/posts/rainbow-tunnel.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;Today I had some more time to code something fun, so I decided to make a tunnel
of sorts.&lt;/p&gt;
&lt;p&gt;The trick is really simple, first you just draw rings around the center of the page,
and tweak their position a bit depending on the position of the mouse.&lt;/p&gt;
&lt;p&gt;To achieve the rainbow effect, you just have to make it so each ring has its hue value
a little higher than the ring before it, and increase all of the rings' hues each frame.&lt;/p&gt;
&lt;p&gt;I did it a little different than that, I have a base hue, which I increase every frame,
and then when each ring gets drawn, it uses the base hue plus a small increment
(which you can control with the mouse wheel).&lt;/p&gt;
&lt;p&gt;I guess this is a bit trippy? &lt;a href="http://kaeruct.github.io/projects/tunnel"&gt;See it full-screen here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kaeruct.github.io/projects/tunnel"&gt;&lt;iframe src="http://kaeruct.github.io/projects/tunnel"&gt;&lt;/iframe&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>fun</category><category>javascript</category><category>programming-projects</category><guid>http://kaeruct.github.io/posts/rainbow-tunnel.html</guid><pubDate>Thu, 07 Mar 2013 20:44:50 GMT</pubDate></item><item><title>Messing Around With Trig</title><link>http://kaeruct.github.io/posts/messing-around-with-trig.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;Yesterday after work I had some time to waste, so I decided to do some
silly things in javascript with a canvas and some trigonometric magic.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kaeruct.github.io/galleries/rainbow"&gt;Here are some screenshots of what they look like&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Move your mouse around to change some variables, and click to toggle clearing of
the canvas. You can achieve some trippy effects!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kaeruct.github.io/projects/lel"&gt;colorful sine wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kaeruct.github.io/projects/flower"&gt;colorful flower&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all on my github, in case you wanna &lt;a href="https://github.com/KaeruCT/short-experiments"&gt;take a look&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>fun</category><category>javascript</category><category>programming-projects</category><guid>http://kaeruct.github.io/posts/messing-around-with-trig.html</guid><pubDate>Tue, 05 Mar 2013 19:49:47 GMT</pubDate></item></channel></rss>