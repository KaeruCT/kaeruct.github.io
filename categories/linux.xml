<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pejibaye Blog (Posts about linux)</title><link>http://kaeruct.github.io/</link><description></description><atom:link href="http://kaeruct.github.io/categories/linux.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 14 Mar 2023 10:14:08 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>How to use Let's Encrypt certificates with Keycloak</title><link>http://kaeruct.github.io/posts/how-to-use-lets-encrypt-certificates-with-keycloak.html</link><dc:creator>Andr√©s Villarreal</dc:creator><description>&lt;p&gt;&lt;img alt="Let's Encrypt + Keycloak" src="http://kaeruct.github.io/letsencrypt_keycloak.png"&gt;&lt;/p&gt;
&lt;p&gt;Keycloak provides user federation, strong authentication, user management, fine-grained authorization, and more. &lt;/p&gt;
&lt;p&gt;Here is a guide to enable HTTPS access to your Keycloak server using a free Let's Encrypt SSL certificate. The beauty of Let's Encrypt is its ease of use and the fact that it's free!&lt;/p&gt;
&lt;p&gt;This guide assumes you have already installed Keycloak at &lt;code&gt;/opt/keycloak/&lt;/code&gt; using the &lt;a href="https://www.keycloak.org/getting-started/getting-started-zip"&gt;official guide for bare metal installs&lt;/a&gt;, and now you want to enable HTTPS access. You need to have version &lt;strong&gt;20&lt;/strong&gt; or higher.&lt;/p&gt;
&lt;p&gt;In all the instructions below, be sure to replace &lt;code&gt;&amp;lt;DOMAIN&amp;gt;&lt;/code&gt; with the actual domain you will be using. All commands in this guide must be run as root.&lt;/p&gt;
&lt;h3&gt;1. Install certbot&lt;/h3&gt;
&lt;p&gt;First you will need to install &lt;code&gt;certbot&lt;/code&gt;. This depends on the Linux distro you are using.&lt;/p&gt;
&lt;p&gt;For example, for apt-based distros such as Debian or Ubuntu, you can just run the following:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;certbot
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2. Create HTTPS certificates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Set up certificates:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;certbot&lt;span class="w"&gt; &lt;/span&gt;certonly&lt;span class="w"&gt; &lt;/span&gt;--standalone&lt;span class="w"&gt; &lt;/span&gt;--preferred-challenges&lt;span class="w"&gt; &lt;/span&gt;http&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;DOMAIN&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3. Configure Keycloak to use Let's Encrypt certificates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Change configuration:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;vi&lt;span class="w"&gt; &lt;/span&gt;/opt/keycloak/conf/keycloak.conf
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Add or update the following lines in that file:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="na"&gt;https-certificate-file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/etc/letsencrypt/live/&amp;lt;DOMAIN&amp;gt;/cert.pem&lt;/span&gt;
&lt;span class="na"&gt;https-certificate-key-file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/etc/letsencrypt/live/&amp;lt;DOMAIN&amp;gt;/privkey.pem&lt;/span&gt;
&lt;span class="na"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;DOMAIN&amp;gt;&lt;/span&gt;

&lt;span class="na"&gt;https-port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;443&lt;/span&gt;
&lt;span class="na"&gt;http-port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Update keycloak config:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;/opt/keycloak/bin/kc.sh&lt;span class="w"&gt; &lt;/span&gt;build
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;You're done! Now you can run the following command and Keycloak should now be accessible from the browser via HTTPS:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;/opt/keycloak/bin/kc.sh&lt;span class="w"&gt; &lt;/span&gt;start
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;4. Optional: Set up Keycloak as a systemd service&lt;/h3&gt;
&lt;p&gt;The official guide purposely leaves this open-ended because there are many ways in which you might want to handle the lifecycle of the Keycloak server. However, I think a good approach is to just use &lt;a href="https://systemd.io/"&gt;systemd&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;4.1. Set up systemd service&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Create user and group:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;useradd&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;keycloak&lt;span class="w"&gt; &lt;/span&gt;keycloak
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Give access to certificates:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0755&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/etc/letsencrypt/&lt;span class="o"&gt;{&lt;/span&gt;live,archive&lt;span class="o"&gt;}&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;chgrp&lt;span class="w"&gt; &lt;/span&gt;keycloak&lt;span class="w"&gt; &lt;/span&gt;/etc/letsencrypt/&lt;span class="o"&gt;{&lt;/span&gt;live,archive&lt;span class="o"&gt;}&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;chgrp&lt;span class="w"&gt; &lt;/span&gt;-h&lt;span class="w"&gt; &lt;/span&gt;keycloak&lt;span class="w"&gt; &lt;/span&gt;/etc/letsencrypt/live/&amp;lt;DOMAIN&amp;gt;/privkey.pem
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Give access to Keycloak directory:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;chown&lt;span class="w"&gt; &lt;/span&gt;-R&lt;span class="w"&gt; &lt;/span&gt;keycloak:keycloak&lt;span class="w"&gt; &lt;/span&gt;/opt/keycloak/
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Create systemd service:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;vi&lt;span class="w"&gt; &lt;/span&gt;/etc/systemd/system/keycloak.service
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Write the following contents into the file. You might need to add your chosen database service to the &lt;code&gt;After&lt;/code&gt; line, for example &lt;code&gt;postgresql.service&lt;/code&gt; or &lt;code&gt;mysql.service&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Keycloak Application Server&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;syslog.target network.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;idle&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;keycloak&lt;/span&gt;
&lt;span class="na"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;keycloak&lt;/span&gt;
&lt;span class="na"&gt;LimitNOFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;102642&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/opt/keycloak/bin/kc.sh start --optimized&lt;/span&gt;
&lt;span class="na"&gt;StandardOutput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;append:/var/log/keycloak.log&lt;/span&gt;
&lt;span class="na"&gt;StandardError&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;inherit&lt;/span&gt;
&lt;span class="na"&gt;RestartSec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;2s&lt;/span&gt;
&lt;span class="na"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;always&lt;/span&gt;
&lt;span class="na"&gt;AmbientCapabilities&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;CAP_NET_BIND_SERVICE&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Reload systemd config and start service:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;daemon-reload
$&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;start&lt;span class="w"&gt; &lt;/span&gt;keycloak.service
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;4.2. Automatic Keycloak server restart when certificates are updated&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Make certbot restart Keycloak after updating certificates:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/etc/letsencrypt/renewal-hooks/deploy
$&lt;span class="w"&gt; &lt;/span&gt;vi&lt;span class="w"&gt; &lt;/span&gt;restart-keycloak.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Write these contents:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
systemctl&lt;span class="w"&gt; &lt;/span&gt;restart&lt;span class="w"&gt; &lt;/span&gt;keycloak
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Make the script executable:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$&lt;span class="w"&gt; &lt;/span&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;+x&lt;span class="w"&gt; &lt;/span&gt;restart-keycloak.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You're done! Now Keycloak is set up as a systemd service and will start when your machine boots up.&lt;/p&gt;</description><category>java</category><category>keycloak</category><category>letsencrypt</category><category>linux</category><category>tips</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/how-to-use-lets-encrypt-certificates-with-keycloak.html</guid><pubDate>Wed, 04 Jan 2023 16:28:41 GMT</pubDate></item><item><title>Setting up sendmail to redirect emails</title><link>http://kaeruct.github.io/posts/setting-up-sendmail-to-redirect-emails.html</link><dc:creator>Andr√©s Villarreal</dc:creator><description>&lt;p&gt;&lt;small&gt;
  Disclaimer: the instructions below are for Ubuntu, but they should work for most distros,
  the biggest difference is that the configuration files might be located elsewhere.
&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;If you're like me, you have a main email address and other email addresses set up in other domains.&lt;/p&gt;
&lt;p&gt;I dislike having to check all my email addresses individually, so I set up my mail servers to redirect
all the email to my main address automatically.&lt;/p&gt;
&lt;p&gt;Sendmail has an aliases feature that makes this very simple to set up.&lt;/p&gt;
&lt;p&gt;Let's say you want to redirect emails this way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;webmaster@yourdomain.com&lt;/code&gt; -&amp;gt; &lt;code&gt;example@gmail.com, someoneelse@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help@yourdomain.com&lt;/code&gt; -&amp;gt; &lt;code&gt;helper@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;support@yourdomain.com&lt;/code&gt; -&amp;gt; &lt;code&gt;helper@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow these steps as root:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Change the &lt;code&gt;/etc/mail/aliases&lt;/code&gt; file to look like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;webmaster&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="nv"&gt;@gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;someoneelse&lt;/span&gt;&lt;span class="nv"&gt;@gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;help&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="nv"&gt;@gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;support&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, each line in the file matches an origin email to a destination email.
 Each line can reference previous entries as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After changing the file, run:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt; $ newaliases
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure port 25 is open on your machine, so sendmail is able to listen for incoming email:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt; $ iptables -A INPUT -p tcp --dport 25 -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Also make sure to save the iptables rules so they will be restored when the service restarts.
 This varies by distro, so it's better to google something like &lt;code&gt;iptables save &amp;lt;your distro&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change &lt;code&gt;/etc/mail/sendmail.mc&lt;/code&gt; so sendmail receives email from the outside world.&lt;/p&gt;
&lt;p&gt;Change this line:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt; DAEMON_OPTIONS(`Family=inet,  Name=MTA-v4, Port=smtp, Addr=127.0.0.1')dnl
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt; DAEMON_OPTIONS(`Family=inet,  Name=MTA-v4, Port=smtp')dnl
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We're not done modifying this file yet.
 Now we need to verify that the domain in the configuration matches your server's domain. If not, change it:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt; MASQUERADE_AS(`yourdomain.com')dnl
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After saving the file, you need to regenerate &lt;code&gt;sendmail.cf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt; m4 /etc/mail/sendmail.mc &amp;gt; /etc/mail/sendmail.cf
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your domain to &lt;code&gt;/etc/mail/local-host-names&lt;/code&gt;. This file has a domain per line.
    If your domain is not there, add it on a new line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart sendmail:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt; $ /etc/init.d/sendmail restart
&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Depending on the configuration of your email client or web UI, the emails might end up stuck in a spam folder,
so make sure to check there.&lt;/p&gt;
&lt;p&gt;If you use Gmail, you can make a filter to avoid sending your redirected emails to spam.
To do so:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do a search for &lt;code&gt;from:yourdomain.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click on "Create a filter with this search".&lt;/li&gt;
&lt;li&gt;Check the "Never send it to Spam" box.&lt;/li&gt;
&lt;li&gt;Click on "Create filter".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Preventing email from being sent to Spam" src="http://kaeruct.github.io/galleries/screenshots/nospamfilter.png"&gt;&lt;/p&gt;</description><category>email</category><category>linux</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/setting-up-sendmail-to-redirect-emails.html</guid><pubDate>Sat, 14 May 2016 16:33:44 GMT</pubDate></item><item><title>Just switched to Ubuntu</title><link>http://kaeruct.github.io/posts/just-switched-to-ubuntu.html</link><dc:creator>Andr√©s Villarreal</dc:creator><description>&lt;p&gt;I decided to replace the Arch Linux installation on my desktop (my main computer)
with Ubuntu. Too bad I don't get to feel 1337 for using Arch anymore.&lt;/p&gt;
&lt;p&gt;So far, so good, except I had a few issues when setting up Eclipse,
but I always seem to get issues when installing Eclipse, no matter what platform...&lt;/p&gt;
&lt;p&gt;One of the main reasons why I decided to do this is because whenever I updated
Arch, something would break. I really like the bleeding edge idea behind Arch, but
I'd prefer to have some stability in the operating system I need to use every day.
I also don't have as much time as I had before to get everything working after
an update. This is the same reason why I started using Ubuntu instead on Arch
on new installations.&lt;/p&gt;
&lt;p&gt;Not to say Ubuntu is perfect, either. I spent some time tweaking it so I could have
the same setup I had in Arch. I don't hate Unity, but I don't really enjoy using
it either, so the first thing I did was install XFCE. Afterwards, I installed
all the development stuff I need for work. It's really easy to get
a LAMP server ready in Ubuntu by using &lt;a href="https://help.ubuntu.com/community/Tasksel"&gt;tasksel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One thing I love about Linux is how you can just copy your whole /home/user
directory and dump it on another installation, and most programs will pick up
the correct settings. This made it really quick to get all my stuff up and running
exactly how I had it set up before. Actually, I have a
&lt;a href="https://github.com/KaeruCT/kaeru-linux-configs"&gt;git repo&lt;/a&gt; just for that.&lt;/p&gt;
&lt;p&gt;Now... back to programming.&lt;/p&gt;</description><category>linux</category><category>ramblings</category><guid>http://kaeruct.github.io/posts/just-switched-to-ubuntu.html</guid><pubDate>Tue, 28 May 2013 11:25:16 GMT</pubDate></item></channel></rss>