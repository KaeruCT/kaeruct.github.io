<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Pejibaye Blog (tutorials)</title><link>http://kaeruct.github.io/</link><description></description><atom:link type="application/rss+xml" href="http://kaeruct.github.io/categories/tutorials.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sat, 14 May 2016 16:59:49 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Setting up sendmail to redirect emails</title><link>http://kaeruct.github.io/posts/setting-up-sendmail-to-redirect-emails.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;small&gt;
  Disclaimer: the instructions below are for Ubuntu, but they should work for most distros,
  the biggest difference is that the configuration files might be located elsewhere.
&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;If you're like me, you have a main email address and other email addresses set up in other domains.&lt;/p&gt;
&lt;p&gt;I dislike having to check all my email addresses individually, so I set up my mail servers to redirect
all the email to my main address automatically.&lt;/p&gt;
&lt;p&gt;Sendmail has an aliases feature that makes this very simple to set up.&lt;/p&gt;
&lt;p&gt;Let's say you want to redirect emails this way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;webmaster@yourdomain.com&lt;/code&gt; -&amp;gt; &lt;code&gt;example@gmail.com, someoneelse@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help@yourdomain.com&lt;/code&gt; -&amp;gt; &lt;code&gt;helper@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;support@yourdomain.com&lt;/code&gt; -&amp;gt; &lt;code&gt;helper@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow these steps as root:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Change the &lt;code&gt;/etc/mail/aliases&lt;/code&gt; file to look like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; webmaster: example@gmail.com, someoneelse@gmail.com
 help: helper@gmail.com
 support: help
&lt;/pre&gt;


&lt;p&gt;As you can see, each line in the file matches an origin email to a destination email.
 Each line can reference previous entries as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After changing the file, run:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; $ newaliases
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure port 25 is open on your machine, so sendmail is able to listen for incoming email:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; $ iptables -A INPUT -p tcp --dport 25 -j ACCEPT
&lt;/pre&gt;


&lt;p&gt;Also make sure to save the iptables rules so they will be restored when the service restarts.
 This varies by distro, so it's better to google something like &lt;code&gt;iptables save &amp;lt;your distro&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change &lt;code&gt;/etc/mail/sendmail.mc&lt;/code&gt; so sendmail receives email from the outside world.&lt;/p&gt;
&lt;p&gt;Change this line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; DAEMON_OPTIONS(`Family=inet,  Name=MTA-v4, Port=smtp, Addr=127.0.0.1')dnl
&lt;/pre&gt;


&lt;p&gt;to&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; DAEMON_OPTIONS(`Family=inet,  Name=MTA-v4, Port=smtp')dnl
&lt;/pre&gt;


&lt;p&gt;We're not done modifying this file yet.
 Now we need to verify that the domain in the configuration matches your server's domain. If not, change it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; MASQUERADE_AS(`yourdomain.com')dnl
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After saving the file, you need to regenerate &lt;code&gt;sendmail.cf&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; m4 /etc/mail/sendmail.mc &amp;gt; /etc/mail/sendmail.cf
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your domain to &lt;code&gt;/etc/mail/local-host-names&lt;/code&gt;. This file has a domain per line.
    If your domain is not there, add it on a new line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart sendmail:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; $ /etc/init.d/sendmail restart
&lt;/pre&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Depending on the configuration of your email client or web UI, the emails might end up stuck in a spam folder,
so make sure to check there.&lt;/p&gt;
&lt;p&gt;If you use Gmail, you can make a filter to avoid sending your redirected emails to spam.
To do so:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do a search for &lt;code&gt;from:yourdomain.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click on "Create a filter with this search".&lt;/li&gt;
&lt;li&gt;Check the "Never send it to Spam" box.&lt;/li&gt;
&lt;li&gt;Click on "Create filter".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Preventing email from being sent to Spam" src="http://kaeruct.github.io/galleries/screenshots/nospamfilter.png"&gt;&lt;/p&gt;&lt;/div&gt;</description><category>email</category><category>linux</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/setting-up-sendmail-to-redirect-emails.html</guid><pubDate>Sat, 14 May 2016 16:33:44 GMT</pubDate></item><item><title>Generating partner.jar for Salesforce API Integration</title><link>http://kaeruct.github.io/posts/generating-partnerjar-for-salesforce-api-integration.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;I ran into a small issue recently when setting up a Java project to use the
Salesforce APIs.&lt;/p&gt;
&lt;p&gt;Basically, you need to download a WSDL file from Salesforce, then use a tool made
by them to generate a jar that you then include in your Java program.&lt;/p&gt;
&lt;p&gt;They instruct you to &lt;a href="http://mvnrepository.com/artifact/com.force.api/force-wsc/"&gt;download &lt;code&gt;force-wsc.jar&lt;/code&gt;&lt;/a&gt; and then run it, but when
you run it you realize they didn't pack the dependencies within the jar!&lt;/p&gt;
&lt;p&gt;To solve this problem, you need to download the following jars:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mvnrepository.com/artifact/rhino/js/1.7R2"&gt;js-1.7R2.jar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mvnrepository.com/artifact/org.antlr/ST4/4.0.7"&gt;ST-4.0.7.jar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then run &lt;code&gt;force-wsc.jar&lt;/code&gt;, including the dependencies in the classpath:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ java -classpath force-wsc-32.1.1.jar:js-1.7R2.jar:ST-4.0.7.jar &lt;span class="se"&gt;\&lt;/span&gt;
  com.sforce.ws.tools.wsdlc partner.wsdl partner-32.1.1.jar
&lt;/pre&gt;


&lt;p&gt;Please note these were the versions that worked for me. If your &lt;code&gt;force-wsc.jar&lt;/code&gt; is
a different version, check if you need to include other version of its dependencies.&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/generating-partnerjar-for-salesforce-api-integration.html</guid><pubDate>Wed, 12 Nov 2014 02:12:38 GMT</pubDate></item><item><title>How to use the Youtube JS API to play music in the background</title><link>http://kaeruct.github.io/posts/how-to-use-the-youtube-js-api-to-play-music-in-the-background.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;The Youtube JavaScript API allows you to embed YouTube videos and
interact with them programatically. To use it, first you need to embed this
script into your page:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;script src="http://www.youtube.com/player_api"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you just want the audio, you can hide the element that contains the video:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;div id="player" style="position: absolute; top: -9999px; left: -9999px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here we use absolute positioning with negative coordinates
because using &lt;code&gt;display: none;&lt;/code&gt; will prevent the &lt;code&gt;onReady&lt;/code&gt; handler
from the Youtube player from triggering on Firefox. I ran across this problem
when making &lt;a href="http://kaeru.neritic.net/projects/short-experiments/walk"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, here's &lt;a href="http://kaeruct.github.io/examples/yt-js-api"&gt;a full example&lt;/a&gt; that will wait for the video to
load and automatically play it:&lt;/p&gt;
&lt;script src="https://gist.github.com/KaeruCT/dcfae82a15af514ea95e.js"&gt;&lt;/script&gt;&lt;/div&gt;</description><category>javascript</category><category>tutorials</category><category>youtube</category><guid>http://kaeruct.github.io/posts/how-to-use-the-youtube-js-api-to-play-music-in-the-background.html</guid><pubDate>Fri, 23 May 2014 18:29:55 GMT</pubDate></item></channel></rss>