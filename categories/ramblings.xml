<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pejibaye Blog (Posts about ramblings)</title><link>http://kaeruct.github.io/</link><description></description><atom:link href="http://kaeruct.github.io/categories/ramblings.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sat, 13 Apr 2019 07:09:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Learning a Programming Language</title><link>http://kaeruct.github.io/posts/learning-a-programming-language.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;I've heard that if you're a good programmer, you should be able to pick up a
new language in a few days. And I've done this myself, I learned the basics of
Go a few months ago. Built some command line programs and a web app with it,
all in a few days.&lt;/p&gt;
&lt;p&gt;Yet, what does it take to &lt;strong&gt;really&lt;/strong&gt; learn a new language? To master it? Sure,
there are some concepts that translate well from language to language, but some
languages have their own thing going on. It usually takes a little longer to
even learn the basics of those languages.&lt;/p&gt;
&lt;p&gt;To go beyond the basic concepts, you have to invest a lot of time into the
language. You have to learn how to program idiomatically in it. I wouldn't go
as far as saying that you have to spend 10,000 hours practicing a language, but
I do think you have to spend at least a thousand hours to know it really well.&lt;/p&gt;
&lt;p&gt;On top of that, most languages have a whole ecosystem of associated tools that
you have to leverage in order to be productive. For example, JavaScript has
&lt;a href="http://gruntjs.com/"&gt;Grunt&lt;/a&gt; (&lt;a href="http://gulpjs.com/"&gt;Gulp&lt;/a&gt; seems to follow),
&lt;a href="http://bower.io/"&gt;Bower&lt;/a&gt;, and &lt;a href="http://www.npmjs.org/"&gt;NPM&lt;/a&gt; (and
&lt;a href="http://yeoman.io/"&gt;Yeoman&lt;/a&gt; most recently). You can't really say you have
mastered JavaScript if you don't know how to use these tools.&lt;/p&gt;
&lt;p&gt;So after learning the language and learning all these tools, you must be a
master in this language, right? Well, you're wrong. You see, most languages
(even the unpopular ones) have something else associated with it: a community.
Sometimes the community is really visible (for example, the &lt;a href="http://www.python.org/community/"&gt;Python
community&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If you want to truly master a language, you should be part of its community.
The community influences the language in many ways. Usually, the community
influences the tools, new language features, libraries, frameworks, and so on.
So if you have invested yourself into a language, you should also become part
of the community.&lt;/p&gt;
&lt;p&gt;Now you have accomplished all of the above: you have spent quite a few hours
programming in the language, you have a broad knowledge of all its tools, and
you're part of the community. Is that enough? No! You have to keep up to date,
learning (or proposing) new features, tools, learning new libraries and
frameworks. You could even build some of those yourself!&lt;/p&gt;
&lt;p&gt;Finally, note that you don't have to do all this. If you really like a
language, go ahead. I believe it is worth the effort. Yet, I don't consider
myself a master of any language. There's just way too much to learn and to do.
I prefer having enough knowledge in a few languages and getting things done in
them, than to be a &lt;em&gt;PHP Guru&lt;/em&gt; or &lt;em&gt;JavaScript Wizard&lt;/em&gt;. I advise you do the same.&lt;/p&gt;&lt;/div&gt;</description><category>ramblings</category><guid>http://kaeruct.github.io/posts/learning-a-programming-language.html</guid><pubDate>Fri, 14 Feb 2014 15:14:19 GMT</pubDate></item><item><title>Just switched to Ubuntu</title><link>http://kaeruct.github.io/posts/just-switched-to-ubuntu.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;I decided to replace the Arch Linux installation on my desktop (my main computer)
with Ubuntu. Too bad I don't get to feel 1337 for using Arch anymore.&lt;/p&gt;
&lt;p&gt;So far, so good, except I had a few issues when setting up Eclipse,
but I always seem to get issues when installing Eclipse, no matter what platform...&lt;/p&gt;
&lt;p&gt;One of the main reasons why I decided to do this is because whenever I updated
Arch, something would break. I really like the bleeding edge idea behind Arch, but
I'd prefer to have some stability in the operating system I need to use every day.
I also don't have as much time as I had before to get everything working after
an update. This is the same reason why I started using Ubuntu instead on Arch
on new installations.&lt;/p&gt;
&lt;p&gt;Not to say Ubuntu is perfect, either. I spent some time tweaking it so I could have
the same setup I had in Arch. I don't hate Unity, but I don't really enjoy using
it either, so the first thing I did was install XFCE. Afterwards, I installed
all the development stuff I need for work. It's really easy to get
a LAMP server ready in Ubuntu by using &lt;a href="https://help.ubuntu.com/community/Tasksel"&gt;tasksel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One thing I love about Linux is how you can just copy your whole /home/user
directory and dump it on another installation, and most programs will pick up
the correct settings. This made it really quick to get all my stuff up and running
exactly how I had it set up before. Actually, I have a
&lt;a href="https://github.com/KaeruCT/kaeru-linux-configs"&gt;git repo&lt;/a&gt; just for that.&lt;/p&gt;
&lt;p&gt;Now... back to programming.&lt;/p&gt;&lt;/div&gt;</description><category>linux</category><category>ramblings</category><guid>http://kaeruct.github.io/posts/just-switched-to-ubuntu.html</guid><pubDate>Tue, 28 May 2013 23:25:16 GMT</pubDate></item><item><title>Origins</title><link>http://kaeruct.github.io/posts/origins.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;I really wanted to make a new post today. It took me a while to think of a good
thing to post about, but I finally came up with something. I'm going to tell you
how I got into programming.&lt;/p&gt;
&lt;p&gt;I've always been an introvert. When I was a kid, I had only one or two friends,
and I would always play videogames after school. I remember the first console I
owned was a Nintendo GameCube. Anyway, there was a computer in the house. I don't
even remember how I learned to use it, but I'm pretty sure the first operating system
I used was Windows XP. I remember having used some Linux too, but I don't remember
what distro it was. It was on my sister's laptop.&lt;/p&gt;
&lt;p&gt;Anyway, when I finally got Internet access at home, I used it a lot. I don't even
remember what I first did, but eventually, I joined a big community that had a forum.&lt;/p&gt;
&lt;p&gt;I really liked the idea of being able to interact with people all over the world.
I made some Internet friends, and eventually we formed some sort of micro-community
of our own. There was a guy that had bought some web hosting, so I asked him if he
could set up a forum for our community. He set us up with a PHP forum software
called Acmlmboard.&lt;/p&gt;
&lt;p&gt;The software wasn't very stable, had plenty of bugs, and was also insecure. Nonetheless,
it worked, and my little community thrived. It was around this time that I started to tinker
around with very basic HTML, since the Acmlmboard forum software allows users to customize
their posts. The feature was similar to the "signature" that some forum software allows. The
cool thing was that you could also add a post "header", which was like the signature, but it
got prepended to the post content instead. So you could wrap HTML around your posts
in order to make it look however you wanted.&lt;/p&gt;
&lt;p&gt;Eventually, I decided to learn some PHP in order to add more features to the forum software.
Yes, my first language is PHP. And I still use it to this day, despite all the hate it gets.
I really like it, and I will probably continue to use it as long as I can. However, I believe in
using the right tool for the job, so I've invested time in learning other languages and learning
which would be more appropiate in what situation.&lt;/p&gt;
&lt;p&gt;Anyway, the forum software's source code was a mess. HTML, structured PHP,
JavaScript, MySQL queries, all mixed up in a bunch of files, global variables everywhere,
commented out code without any indications of why, unused functions, all the bad
PHP don'ts you can name, the forum had them.&lt;/p&gt;
&lt;p&gt;Compared to what I program today, that forum was complete shit. But hey, we all start somewhere.
Anyway, the forum software continued to evolve since my small community wanted more
features, bugs fixed, etc. So I sort of learned programming by doing all that.&lt;/p&gt;
&lt;p&gt;Some of the people in the community also knew how to program, so sometimes we would all fix bugs
and touch the code at the same time. We were all homebrew programmers so we did not know of
version control, or even about developing locally and then deploying the changes to the server.
In short, we all modified the code that was "on production". Many times we fucked up and the
site went down for a few hours, but we never really learned our lesson. By the way, this
was around 2009.&lt;/p&gt;
&lt;p&gt;Anyway, about two years before finishing high school, I already knew I wanted to be a software
developer. So when I got to college (2011) I really aced through the first introductory classes since I
already knew how to program. Then I learned some more professional stuff like version control,
and other programming paradigms like OOP or functional programming. Around this time I also decided
to switch to Linux as my main operating system.&lt;/p&gt;
&lt;p&gt;I installed Arch Linux on the computer I had at the time (an old Pentium 4 with about 500MB of ram).
The computer came with Windows XP, and the performance improvement I got from installing Linux on it
really amazed me. I also learned a lot in the process, so I am glad I chose Arch Linux as my first distro.&lt;/p&gt;
&lt;p&gt;Nowadays, I use Arch Linux on my main computer (a Intel Core i5 with 4GB ram). However,
I installed Xubuntu on all the other computers, since I didn't have much time to
configure them and I like XFCE. I will probably keep on using Ubuntu derivatives from now on,
since it's a lot faster to get a system up and running, and I don't really care about being
bleeding edge.&lt;/p&gt;
&lt;p&gt;Back to my story, after a year or so of college, I decided to try and get a web developer position
at a company so I applied for a part-time position to a place that needed PHP devs.
I put a link to my Github account on my resume, and I think they liked it. I got
an interview pretty quickly, and one of their developers interviewed me after the
HR lady did. I felt at home there, and he noticed that I knew all that was needed
for the job, so I got the job pretty easily.&lt;/p&gt;
&lt;p&gt;Now it's been about a year after I got that job. It's been great so far, I get
to work from home 8 hours a week (I work 20/h a week). If I were working full-time
I would get three days of work from home.&lt;/p&gt;
&lt;p&gt;I think being part-time has sort of affected which projects I've been assigned to. Right now,
the project I am involved in has become kind of boring for me. There have been plenty of
different features to build and problems to be solved, but lately, most of the work I have done
is changing the application since the client keeps changing his mind. And it's sort of boring.&lt;/p&gt;
&lt;p&gt;I know for sure I don't want to work as PHP developer forever, but I've thought about it and
I'm not sure what I should work on. In the place where I work, they also need Ruby on Rails,
and Android/iOS developers, so I could do either of those. However, I would prefer to work
with Python or NodeJS instead, and I don't think they need that kind of developers
right now. So I might apply for job elswhere next year or so, after I have
graduated from college.&lt;/p&gt;
&lt;p&gt;I'm also thinking about studying either Business Administration or something else
related to business, but I'll wait until I have my Bachelor's degree in software development
to decide what else to study.&lt;/p&gt;
&lt;p&gt;And that's my post for the month. Thanks for reading!&lt;/p&gt;&lt;/div&gt;</description><category>ramblings</category><guid>http://kaeruct.github.io/posts/origins.html</guid><pubDate>Wed, 15 May 2013 03:07:22 GMT</pubDate></item></channel></rss>