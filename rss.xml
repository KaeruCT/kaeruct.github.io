<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Pejibaye Blog</title><link>http://kaeruct.github.io/</link><description>Fun and code</description><atom:link type="application/rss+xml" href="http://kaeruct.github.io/rss.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sat, 15 Jan 2022 10:08:25 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Free Static Web Hosts for Frontend Developers</title><link>http://kaeruct.github.io/posts/free-static-web-hosts-for-frontend-developers.html</link><dc:creator>Andrés Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img alt="F-Droid" src="http://kaeruct.github.io/static-website-code.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Nowadays it's very easy to publish on the web for free.&lt;/p&gt;
&lt;p&gt;There are countless blogging platforms and website creators. But these platforms usually end up controlling your content. Sometimes you cannot even export your own data!&lt;/p&gt;
&lt;p&gt;The other extreme is to set up your own server by yourself. Buy a VPS (virtual private server) or a shared hosting somewhere, install a web server, and upload your files. This is a lot of work already! Specially if all you want is to publish a static website.&lt;/p&gt;
&lt;p&gt;You already know HTML and CSS, and maybe a bit of JavaScript. You just want a place where you can drop your files and see it on the web!&lt;/p&gt;
&lt;p&gt;Here is a list of services that allow you to do that, in no specific order:&lt;/p&gt;
&lt;h2&gt;Netlify&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; allows you to drag &amp;amp; drop a zip with your files. You can also connect it to your project from Github, Gitlab or Bitbucket. I use Netlify for a lot of my projects, such as &lt;a href="https://desk.glitchy.website"&gt;desk.glitchy.website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Vercel&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://vercel.com/new"&gt;Vercel&lt;/a&gt; is very similar to Netlify. They are also the company behing Next.js, so they have many integrations with it. I use Vercel for my &lt;a href="https://andres.villarreal.co.cr"&gt;personal website&lt;/a&gt; and for &lt;a href="https://glitchy.website"&gt;glitchy.website&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Surge&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://surge.sh/"&gt;Surge&lt;/a&gt; allows you to easily publish your static website from the command line.&lt;/p&gt;
&lt;h2&gt;Github Pages&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; allows you to directly from your GitHub repository. Just edit, push, and your changes are live. This blog itself is hosted on Github Pages.&lt;/p&gt;
&lt;h2&gt;GitLab Pages&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.gitlab.com/ee/user/project/pages/"&gt;GitLab Pages&lt;/a&gt; allows you to publish static websites directly from a repository in GitLab.&lt;/p&gt;
&lt;h2&gt;Closing Words&lt;/h2&gt;
&lt;p&gt;With these services, you can host your own static website for free. If having your own domain is important, then you will have to buy one, but that's the only thing you need, as many of these services allow you to use your own custom domain as well.&lt;/p&gt;
&lt;p&gt;I recommend you familiarize yourself with the options and not to put all your eggs in one basket. The beauty of static website is that something happens to the provider, you can just copy your files to another one, and you're done! Keep it simple.&lt;/p&gt;&lt;/div&gt;</description><category>css</category><category>html</category><category>javascript</category><category>tips</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/free-static-web-hosts-for-frontend-developers.html</guid><pubDate>Sat, 15 Jan 2022 09:30:31 GMT</pubDate></item><item><title>Publishing an App on F-Droid</title><link>http://kaeruct.github.io/posts/publishing-an-app-on-f-droid.html</link><dc:creator>Andrés Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://f-droid.org/"&gt;&lt;img alt="F-Droid" src="http://kaeruct.github.io/fdroid.svg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I made &lt;a href="https://f-droid.org/packages/com.kaeruct.raumballer/"&gt;some&lt;/a&gt; &lt;a href="https://f-droid.org/packages/com.kaeruct.gotosleep/"&gt;small&lt;/a&gt; &lt;a href="https://f-droid.org/packages/com.kaeruct.glxy/"&gt;apps&lt;/a&gt; for Android and I wanted to distribute them. I also care a lot about software freedom, so F-Droid is the best place for me to publish my apps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disclaimer!
You are not able to sell your app on F-Droid. If you want to make money with it, you would need to allow users to pay through another method. Please see this &lt;a href="https://opensource.stackexchange.com/questions/88/how-can-free-and-open-source-projects-be-monetized"&gt;StackExchange question&lt;/a&gt; if you're interested in monetization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;What's F-Droid?&lt;/h2&gt;
&lt;p&gt;F-Droid is an alternative for the Play Store and other Android stores focused on software freedom and privacy.&lt;/p&gt;
&lt;p&gt;The biggest difference is that F-Droid only allows &lt;a href="https://www.gnu.org/philosophy/free-sw.en.html"&gt;Free and Open Source (FOSS) software&lt;/a&gt;. F-Droid also respects your privacy and discourages application which do not.&lt;/p&gt;
&lt;p&gt;In an age where privacy and software freedom matters most, F-Droid is the perfect replacement for other Android stores.&lt;/p&gt;
&lt;h2&gt;Why publish on F-Droid?&lt;/h2&gt;
&lt;p&gt;F-Droid is a great way of distributing your FOSS Android application. It makes it very easy for your users to install your app and keep it up to date, without requiring them to side-load it.&lt;/p&gt;
&lt;p&gt;There is also a higher level of trust since every apk published on F-Droid is built from source.&lt;/p&gt;
&lt;h2&gt;How to submit your app to F-Droid&lt;/h2&gt;
&lt;p&gt;I've broken this down into two big steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Preparing&lt;/strong&gt; your app&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Submitting&lt;/strong&gt; it to F-Droid&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Preparing your app's repo&lt;/h3&gt;
&lt;p&gt;F-Droid needs some metadata about your app so it can show something to the users. For example: app name, description, screenshots, and the changelog.&lt;/p&gt;
&lt;p&gt;Makes sure you have good screenshots and good explanatory texts about your app. This makes people more interested in it, and speeds up the review process.&lt;/p&gt;
&lt;p&gt;The best way to get this metadata to F-Droid is to put it in your app's repo. You only need to create a few files, following either of these methods. I recommend Fastlane.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/-/snippets/1895688"&gt;Fastlane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/-/snippets/1901490"&gt;Triple-T&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Submitting your app's build metadata to F-Droid&lt;/h3&gt;
&lt;p&gt;Getting your app on F-Droid is as easy as sending them a merge request to their &lt;a href="https://gitlab.com/fdroid/fdroiddata"&gt;data repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To summarize, you need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fork the repo on GitLab&lt;/li&gt;
&lt;li&gt;Create a new branch for your changes&lt;/li&gt;
&lt;li&gt;Create a metadata &lt;code&gt;.yml&lt;/code&gt; file for your app. You should name it using your app's id, for example: &lt;code&gt;com.kaeruct.raumballer.yml&lt;/code&gt;. There are some templates &lt;a href="https://gitlab.com/fdroid/wiki/-/wikis/Metadata/YAML-Metadata"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Submit the merge request to &lt;a href="https://gitlab.com/fdroid/fdroiddata"&gt;F-Droid's data repo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Wait for the automated build to finish.&lt;/li&gt;
&lt;li&gt;Fix any errors in the build or feedback to your merge request.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are details instructions in the repo's &lt;a href="https://gitlab.com/fdroid/fdroiddata/-/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; file.&lt;/p&gt;
&lt;p&gt;I highly recommend you also set up auto updates. This allows F-Droid to automatically know when you have released a new version. It will then update your app's metadata &lt;code&gt;.yml&lt;/code&gt; file automatically and publish the new version of your app on the store.&lt;/p&gt;
&lt;h3&gt;My experience&lt;/h3&gt;
&lt;p&gt;Each of the apps I submitted were approved around 2 or 3 weeks, but this may vary depending on the complexity of your app. The contributors are very friendly and always give you helpful feedback to get your app on F-Droid as soon as possible.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitlab.com/fdroid/fdroiddata/-/blob/master/metadata/com.kaeruct.raumballer.yml"&gt;Here is one of my app's metadata file on the F-Droid data repo&lt;/a&gt; and &lt;a href="https://github.com/KaeruCT/RaumBaller"&gt;the source code on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Closing words&lt;/h3&gt;
&lt;p&gt;F-Droid is a very valuable resource for people who care about software freedom and privacy. It is also run by volunteers. Please &lt;a href="https://f-droid.org/en/donate/"&gt;donate&lt;/a&gt; if you are able to!&lt;/p&gt;&lt;/div&gt;</description><category>android</category><category>f-droid</category><category>tips</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/publishing-an-app-on-f-droid.html</guid><pubDate>Tue, 03 Aug 2021 15:29:13 GMT</pubDate></item><item><title>My top tips for junior developers</title><link>http://kaeruct.github.io/posts/my-top-tips-for-junior-developers.html</link><dc:creator>Andrés Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;Last year, I was tasked with mentoring an intern. It wasn't my first time mentoring, but it was my first time being fully in charge of a new employee. In the end, the intern was hired as a full-time employee, and I thought it would be helpful to compile all the advice I've been giving them, for future reference.&lt;/p&gt;
&lt;p&gt;The following tips come from my experience and my way of working, as well as my own personal opinions.&lt;/p&gt;
&lt;h2&gt;Tip 1: Learn how to search effectively&lt;/h2&gt;
&lt;p&gt;Knowing what to search and how to search is an essential skill.
Usually, I don't remember or know most of the things my colleagues ask me. Yet, after 5 minutes I can usually figure it out or at least point them in the right direction. All thanks to the power of search.&lt;/p&gt;
&lt;h3&gt;How to search&lt;/h3&gt;
&lt;p&gt;As with most things in life, Google will probably have an answer for you. Make sure to type it in a way that makes sense for Google. For example, if you have an error, copy-paste it word-for-word and put it inside double (") quotes. This might take you to Github issues, Stack Overflow answers, or blogs like this one!&lt;/p&gt;
&lt;p&gt;If you don't find anything, try different variations of your search. You can try removing specifics (line numbers are often useless, and also data values). For example, if you get an error like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;TypeError [ERR_INVALID_ARG_TYPE]: The "msecs" argument must be of type number. Received type string
    at validateNumber (internal/validators.js:130:11)
    at validateTimerDuration (internal/timers.js:146:3)
    at ClientRequest.setTimeout (_http_client.js:735:11)
    ...
&lt;/pre&gt;


&lt;p&gt;You could be searching the following instead:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;TypeError [ERR_INVALID_ARG_TYPE]: The "msecs" argument must be of type number. Received type string
&lt;/pre&gt;


&lt;p&gt;If that's still too long, you can try only&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;The "msecs" argument must be of type number
&lt;/pre&gt;


&lt;p&gt;If you still can't find anything useful, take advantage of your company's resources. Try the same search on your company's internal systems. Try everything: Slack, bug tracker (e.g.: JIRA), wiki, emails, Google Docs. If you still don't find anything, try reaching out to your more senior colleagues. They will surely know how to help or at least point you in the right direction.&lt;/p&gt;
&lt;h3&gt;How to navigate codebases&lt;/h3&gt;
&lt;p&gt;Sometimes your search will guide you to the source code that is throwing the error you were searching for. This is a bit sad since it means probably no one has found a solution yet for the problem you're having. In these cases you will need to read the code you found and try to understand it.&lt;/p&gt;
&lt;p&gt;I think the best way to understand code is to see the flow of the data in the code. For example, let's say you have an app that let's you search movies by actor name.&lt;/p&gt;
&lt;p&gt;I would first try to understand where the movie data is coming from. An external API? A database? A file?&lt;/p&gt;
&lt;p&gt;Then I would see what happens when I type "Nicolas Cage" into the search box and click "Search". Does the app do an external network request? Is the data already available locally? If I search "Search" in the source code, will I be able to find the code for the button that triggers the search?&lt;/p&gt;
&lt;p&gt;I would keep asking myself questions and answering them, until I have a better understanding of where the data is going to and coming from.&lt;/p&gt;
&lt;h3&gt;How to deal with Github issues&lt;/h3&gt;
&lt;p&gt;You might get lucky and find someone that had the same issue and opened a Github issue for it. If you're even luckier, someone else (or the original reporter) might have found a solution and shared it there. Then, the repository's maintainers may have merged the solution. Or maybe not yet.&lt;/p&gt;
&lt;p&gt;If you don't want to wait for the repository's maintainers to merge the fix, there's always the option of forking the repository and merging the fix yourself. This is usually not a good idea unless you need this fix very urgently, since your fork will quickly become outdated. It's up to you and/or your team to decide if this is worth the risks.&lt;/p&gt;
&lt;h2&gt;Tip 2: Don't copy-paste code without understanding it&lt;/h2&gt;
&lt;p&gt;I have noticed way too many junior developers copy &amp;amp; paste code without understanding what it's doing. I've been guilty of this as well but I don't remember it, maybe because I rely on copy-pasting so much!&lt;/p&gt;
&lt;p&gt;The problem with this: it can cause unintended consequences. If the copy-pasted code breaks you will not know how to fix it since you didn't understand it in the first place. This means sooner or later you will have to come back to this code and understand it.&lt;/p&gt;
&lt;p&gt;If you are doing unit testing (which you should), you will need to understand the code first, to be able to write tests for it. You will need to identify every execution path it might take and think about the inputs that might break it. &lt;/p&gt;
&lt;p&gt;One thing that has worked for me is to avoid copy-pasting the code and try to write it on my own. &lt;a href="https://wiki.c2.com/?ToGrok"&gt;Grok&lt;/a&gt; what the code is doing and writing it using variable/function/class names that match your project and business logic. Once you have done this you might understand it a bit better.&lt;/p&gt;
&lt;h2&gt;Tip 3: Know your tools&lt;/h2&gt;
&lt;p&gt;With tools, I mean everything that helps you get your work done. A few examples:&lt;/p&gt;
&lt;p&gt;Shell, text editor, IDE, compiler, package manager, version control, CI/CD (continuous integration/continuous delivery).&lt;/p&gt;
&lt;p&gt;Notice I am using the generic terms and not the specific tools you or your company might be using. Why is that? Because you should be able to pick up tools and work with them.&lt;/p&gt;
&lt;p&gt;To have a good productivity, you need to become familiar with the tools used by your colleagues, so make sure to ask around for recommendations.&lt;/p&gt;
&lt;p&gt;In some cases you will need to use tools that you don't necessarily enjoy using, and that's okay. Tools are a means to an end. Tools should help you build your final product. They should not be your main focus - unless you work for a software company that builds software development tools.&lt;/p&gt;
&lt;p&gt;Here are some of my favorite tools at the moment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bash&lt;/li&gt;
&lt;li&gt;Visual Studio Code&lt;/li&gt;
&lt;li&gt;IntelliJ IDEA&lt;/li&gt;
&lt;li&gt;yarn&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Gitlab CI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why are they my favorite tools? Because I'm used to them. Only looking at them, many developers will know I am primarily a frontend developer. There's always going to be something better and everyone has different preferences. But it doesn't matter, as long as the tools help you get the job done. Still, always be open to new tools and ask other people why they chose theirs. They might change your mind and you will become even more productive! A good way to quickly get to know a tool is to do a search like this: "&amp;lt;tool&amp;gt; tips and tricks".&lt;/p&gt;
&lt;h3&gt;Know your programming language(s)&lt;/h3&gt;
&lt;p&gt;It's also very important to know all the fundamental concepts of the programming language(s) you are using at work. Again, make sure to ask your more experienced colleagues for recommendations. There are tons of books, online courses, and tutorials for every mainstream programming language out there.&lt;/p&gt;
&lt;p&gt;You need to be fluent in your language. This will allow you to focus on solving the business problems instead of fighting against the language to make the code work. You don't have to be an expert immediately, it will take time. But make sure to keep learning and aim to become an expert in the language within the first two years of your career.&lt;/p&gt;
&lt;h2&gt;Tip 4: Know how and when to ask for help&lt;/h2&gt;
&lt;p&gt;When you are new, you will have a lot of questions, and that's okay. Asking questions is how we learn.&lt;/p&gt;
&lt;h3&gt;Ask yourself first&lt;/h3&gt;
&lt;p&gt;Before you ask the question to someone else, ask it to yourself. Then try to come up with a few guesses and try to validate them. This will lead to more and more questions.&lt;/p&gt;
&lt;p&gt;This helps you understand what you really need to know to solve the problem, and when you go to someone else you will have a much better question to ask. Good questions breed good answers.&lt;/p&gt;
&lt;p&gt;For example, let's say you have to change the &lt;code&gt;href&lt;/code&gt; of a link in the footer of your company's website.
I would ask myself: "where is the code for this link?"&lt;/p&gt;
&lt;p&gt;Then I would come up with a few hypotheses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I can find it if I search for the current &lt;code&gt;href&lt;/code&gt; on the codebase.&lt;/li&gt;
&lt;li&gt;If I change it here and deploy the code, the link will change.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After that, I would try to prove my first hypothesis by searching for the current &lt;code&gt;href&lt;/code&gt;.
Let's say I could not find it in the code. Then I would come up with a different hypothesis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is not in the code, so the content must come from somewhere else.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then I would ask myself more questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where is the content for the footer stored?&lt;/li&gt;
&lt;li&gt;How can I change it?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once I have these questions, I can go to a more experienced colleague, and they will be able to quickly point me in the right direction: "Oh, that content is stored in our content management system. I will show you how to change it".&lt;/p&gt;
&lt;p&gt;If I had  asked them my first question instead: "where is the code for this link", they would have given me a very simple answer that would take me straight to the code and that would have not been as helpful.&lt;/p&gt;
&lt;h3&gt;Fighting forgetfulness&lt;/h3&gt;
&lt;p&gt;I am very forgetful, so I like to keep notes. Whenever I find the answer to a an important question, I make sure to write it down somewhere. This has several benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You don't need to remember everything.&lt;/li&gt;
&lt;li&gt;You can share your notes with others (this is usually called documentation).&lt;/li&gt;
&lt;li&gt;You can easily keep track of how much you have learned over time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can keep your notes on paper or digitally. Make sure to try both and see what works best for you.&lt;/p&gt;
&lt;h2&gt;Tip 5: Maintain a healthy work-life balance&lt;/h2&gt;
&lt;p&gt;When you're starting out you always want to keep learning more and more while also delivering your work. This means you will probably work many hours a day if you're very passionate. This is fine if you are enjoying yourself, but you should be careful and aware of &lt;a href="https://en.wikipedia.org/wiki/Occupational_burnout"&gt;burn out&lt;/a&gt;. A good way to avoid this is to have a routine you follow every work day, and make sure you have enough breaks throughout the day. In the end it all comes down to a matter of discipline and knowing yourself.&lt;/p&gt;
&lt;p&gt;Remember life is about living, not about working! It's a good idea to have other things outside going on in your life aside from work. There's no right or wrong here because it depends on you, but make sure you manage your stress in a healthy way.&lt;/p&gt;&lt;/div&gt;</description><category>career</category><category>mentoring</category><category>tips</category><guid>http://kaeruct.github.io/posts/my-top-tips-for-junior-developers.html</guid><pubDate>Sat, 18 Apr 2020 11:06:53 GMT</pubDate></item><item><title>Starry Sky in HTML5 Canvas - Part 2</title><link>http://kaeruct.github.io/posts/starry-sky-in-html5-canvas-pt2.html</link><dc:creator>Andrés Villarreal</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;This is part of a series! Please make sure you have read &lt;a href="http://kaeruct.github.io/posts/starry-sky-in-html5-canvas-pt1.html"&gt;Part 1&lt;/a&gt; first!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; -- you can try out the result of this tutorial by visiting this &lt;a href="https://codesandbox.io/s/z68y1012yl?fontsize=14"&gt;CodeSandbox&lt;/a&gt;.
However, I encourage you to read the blog post and try to follow along to understand how and why it works.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Last time we left off with a very nice starry sky, but it's a bit dead. We need to add some animation to it!
The way animation is done on HTML5 canvas is by drawing something else every frame.&lt;/p&gt;
&lt;p&gt;For our case, we can use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame"&gt;&lt;code&gt;requestAnimationFrame() function&lt;/code&gt;&lt;/a&gt; to call our &lt;code&gt;render()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;First, we will add a &lt;code&gt;counter&lt;/code&gt; variable. We will increment this every time we draw.
This is useful because we will have a number that will change with every render.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then, we will update our &lt;code&gt;render()&lt;/code&gt; function so it uses &lt;code&gt;requestAnimationFrame()&lt;/code&gt;. We will also make it increment the counter.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"rgb(255, 255, 255)"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;For now, this will look exactly the same as before, because we always render the same thing. But let's begin to change that now.&lt;/p&gt;
&lt;p&gt;We'll make a small change to make the stars look like they're flickering.&lt;/p&gt;
&lt;p&gt;First, let's add a function to generate an opacity value. This value will go from 0 to 1 and will determine the opacity of our star.&lt;/p&gt;
&lt;p&gt;The use of &lt;code&gt;Math.sin()&lt;/code&gt; in the function below is just to make sure we get a value that changes smoothly.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minStarOpacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxStarOpacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opacityIncrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maxStarOpacity&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;minStarOpacity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;minStarOpacity&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;opacityIncrement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then, we will use this function when rendering our stars.
Also notice how we change the color from &lt;code&gt;rgb(255, 255, 255)&lt;/code&gt; to &lt;code&gt;rgba(255, 255, 255, opacity)&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// factor will be a different number for every star&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sb"&gt;`rgba(255, 255, 255, &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;opacity&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="Animated Starry Sky" src="http://kaeruct.github.io/galleries/screenshots/starry/flicker.gif"&gt;&lt;/p&gt;
&lt;p&gt;Now the sky is looking really nice and animated. But it's still missing a nice big &lt;code&gt;moon&lt;/code&gt;. Let's add it next.&lt;/p&gt;
&lt;p&gt;We will create a function to render our moon, and call it from &lt;code&gt;render()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"#fea"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderMoon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// render a smaller circle above the moon to give it that well-known moon-shape&lt;/span&gt;
  &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;And our updated &lt;code&gt;render()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sb"&gt;`rgba(255, 255, 255, &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;opacity&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;renderMoon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;That leaves us with the finished product:
&lt;img alt="Animated Starry Sky with Moon" src="http://kaeruct.github.io/galleries/screenshots/starry/moon.gif"&gt;&lt;/p&gt;
&lt;p&gt;Thanks for following this tutorial to the end! Remember you can look at a working example in the &lt;a href="https://codesandbox.io/s/z68y1012yl?fontsize=14"&gt;CodeSandbox&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Have fun experimenting and tweaking the values used to render the stars and the moon.
Some ideas you may want to try to learn more and improve your skills:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make the stars more colorful.&lt;/li&gt;
&lt;li&gt;Make the moon move across the sky.&lt;/li&gt;
&lt;li&gt;Add shooting stars.&lt;/li&gt;
&lt;li&gt;Add a gradient background instead of a solid color.&lt;/li&gt;
&lt;li&gt;Add multiple moons.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don't hesitate to contact me at &lt;a href="http://twitter.com/KaeruCT"&gt;@KaeruCT&lt;/a&gt; if you have any questions, suggestions, or improvements for this tutorial!&lt;/p&gt;&lt;/div&gt;</description><category>canvas</category><category>javascript</category><category>programming-projects</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/starry-sky-in-html5-canvas-pt2.html</guid><pubDate>Sat, 13 Apr 2019 22:31:13 GMT</pubDate></item><item><title>Starry Sky in HTML5 Canvas - Part 1</title><link>http://kaeruct.github.io/posts/starry-sky-in-html5-canvas-pt1.html</link><dc:creator>Andrés Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;In my spare time I often enjoy creating visualizations using HTML5 canvas.
I'm planning to do a little presentation about this so I thought a good way to get started was to create a blog post explaining how to do a simple one.&lt;/p&gt;
&lt;p&gt;This tutorial will teach you how to create something like the image below from scratch!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Animated Starry Sky with Moon" src="http://kaeruct.github.io/galleries/screenshots/starry/moon.gif"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; -- you can try out the result of &lt;strong&gt;this part&lt;/strong&gt; of the tutorial by visiting this &lt;a href="https://codesandbox.io/s/kmrx1z6wn7?fontsize=14"&gt;CodeSandbox&lt;/a&gt;.
However, I encourage you to read the blog post and try to follow along to understand how and why it works.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, you will need an HTML file, let's name it &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Starry sky&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nt"&gt;canvas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;canvas&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"canvas"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Nothing crazy so far, just some styles and a &lt;code&gt;canvas&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;Next, let's create a JavaScript file. Let's name this &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"#030318"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#canvas"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2d"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;In the code above, we set the canvas' width and height so it takes up the whole window.
Then, in the &lt;code&gt;render()&lt;/code&gt; function, we fill the canvas with the background color.
If you run it on your browser, it will look like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Step 1" src="http://kaeruct.github.io/galleries/screenshots/starry/step1.png"&gt;&lt;/p&gt;
&lt;p&gt;Yup. Not very interesting. Let's put something in there!
Let's add some code to our &lt;code&gt;index.js&lt;/code&gt; file to draw some stars.&lt;/p&gt;
&lt;p&gt;First, let's have a function that creates the stars.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createStars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;spacing&lt;/code&gt; parameter will control the spacing between stars.&lt;/p&gt;
&lt;p&gt;Then, let's update our &lt;code&gt;render()&lt;/code&gt; function so it renders the stars.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"rgb(255, 255, 255)"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;For our purposes, a star is a circle, so we can use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc"&gt;&lt;code&gt;arc()&lt;/code&gt; function&lt;/a&gt; to draw our stars.
An explanation of the parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are used for the position.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; is used for the radius of the circle.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; and &lt;code&gt;Math.PI * 2&lt;/code&gt; are the start and end angle, respectively.
   A full circle goes from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;2pi&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The line &lt;code&gt;ctx.fillStyle = "rgb(255, 255, 255)";&lt;/code&gt; is used to set the color of the circle to white.&lt;/p&gt;
&lt;p&gt;Let's see what we get now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Step 2" src="http://kaeruct.github.io/galleries/screenshots/starry/step2.png"&gt;&lt;/p&gt;
&lt;p&gt;It's definitely a bit more interesting. But it doesn't look like a starry sky at all!
Stars don't usually look so uniform and boring. We need to add some randomness.&lt;/p&gt;
&lt;p&gt;Let's create a function called &lt;code&gt;randomInt(max)&lt;/code&gt; that will return a random number:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then, let's use these random numbers when creating our stars:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createStars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="Step 3" src="http://kaeruct.github.io/galleries/screenshots/starry/step3.png"&gt;&lt;/p&gt;
&lt;p&gt;That looks already almost real! Now let's make it so the stars are different sizes.
To do this, we will need a different radius for each star, so we will add it to the star objects.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxStarRadius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createStars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;maxStarRadius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then, we will update the &lt;code&gt;render()&lt;/code&gt; function so it uses the star's radius when drawing.
While we're at it, let's extract the circle drawing logic to a new function as well.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fillStyle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fillStyle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"rgb(255, 255, 255)"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="Step 4" src="http://kaeruct.github.io/galleries/screenshots/starry/step4.png"&gt;&lt;/p&gt;
&lt;p&gt;Much better! Now the stars are all different sizes!&lt;/p&gt;
&lt;p&gt;This is all for part 1. You can continue reading &lt;a href="http://kaeruct.github.io/posts/starry-sky-in-html5-canvas-pt2.html"&gt;Part 2&lt;/a&gt;, where we will add a moon and make our stars flicker!&lt;/p&gt;&lt;/div&gt;</description><category>canvas</category><category>javascript</category><category>programming-projects</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/starry-sky-in-html5-canvas-pt1.html</guid><pubDate>Sat, 13 Apr 2019 21:35:56 GMT</pubDate></item><item><title>How to show preview images when sharing links of your website</title><link>http://kaeruct.github.io/posts/how-to-show-preview-images-when-sharing-links-of-your-website.html</link><dc:creator>Andrés Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;When you share a link on social media or mesagging apps, sometimes the app shows a nice preview thumbnail with a description? You can click on it and it will take you to the linked website. I wanted to have this functionality for a website I was working on, so I did some research on how to get it working.&lt;/p&gt;
&lt;p&gt;Short answer: use the &lt;code&gt;og:image&lt;/code&gt; meta tag.&lt;/p&gt;
&lt;p&gt;Longer answer: read on.&lt;/p&gt;
&lt;p&gt;You have to use &lt;a href="https://ogp.me/"&gt;Open Graph&lt;/a&gt; meta tags.
There's a bunch of meta tags to use, but the ones you need for previews are the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"twitter:card"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"summary"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Thumbnail example"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Only for Nic Cage fans"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://www.placecage.com/c/460/300"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://kaeruct.github.io/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When a website with the previous tags is shared on social media, you will get a nice preview card with thumbnail, title, and description.&lt;/p&gt;
&lt;p&gt;Important points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You &lt;strong&gt;NEED&lt;/strong&gt; to include the &lt;code&gt;twitter:card&lt;/code&gt; meta tag for Twitter to display the preview. Otherwise it won't work. If you don't care about Twitter you can remove it.&lt;/li&gt;
&lt;li&gt;Some apps/websites will not include your preview thumbnail if it's not served via HTTPS. So make sure the image URLs always start with &lt;code&gt;https://&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;og:url&lt;/code&gt; value should point to the canonical URL of the page, not to the root of your website.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below you can see some examples:&lt;/p&gt;
&lt;h3&gt;Twitter&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Twitter" src="http://kaeruct.github.io/galleries/screenshots/og/twitter.png"&gt;&lt;/p&gt;
&lt;h3&gt;Slack&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Slack" src="http://kaeruct.github.io/galleries/screenshots/og/slack.png"&gt;&lt;/p&gt;
&lt;h3&gt;Telegram&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Telegram" src="http://kaeruct.github.io/galleries/screenshots/og/telegram.png"&gt; &lt;/p&gt;
&lt;h3&gt;WhatsApp&lt;/h3&gt;
&lt;p&gt;&lt;img alt="WhatsApp" src="http://kaeruct.github.io/galleries/screenshots/og/whatsapp.png"&gt;&lt;/p&gt;
&lt;h3&gt;Discord&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Discord" src="http://kaeruct.github.io/galleries/screenshots/og/discord.png"&gt;&lt;/p&gt;&lt;/div&gt;</description><category>html</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/how-to-show-preview-images-when-sharing-links-of-your-website.html</guid><pubDate>Sat, 13 Apr 2019 07:08:24 GMT</pubDate></item><item><title>Migrating old-style JavaScript code to ES6</title><link>http://kaeruct.github.io/posts/migrating-old-style-javascript-code-to-es6.html</link><dc:creator>Andrés Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently (at work) I had to migrate a medium-sized JavaScript codebase (20KLOC) to &lt;a href="https://github.com/lukehoban/es6features"&gt;ES6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We wanted to migrate to take advantage of the new features such as arrow functions, destructuring, and classes (there are a bunch more!).
Additionally, I was tasked with introducing &lt;a href="https://eslint.org/"&gt;eslint&lt;/a&gt; and &lt;a href="https://prettier.io/"&gt;prettier&lt;/a&gt; to improve the quality of our code a bit more.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Before diving into the migration process, first I'd like to give some context on the state of the application.&lt;/p&gt;
&lt;p&gt;We already used &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; and &lt;a href="https://webpack.js.org/"&gt;webpack&lt;/a&gt; to build our frontend, so I thought the migration should be straightforward -- and it was.&lt;/p&gt;
&lt;p&gt;I was heavily involved in modifying our build process to use npm instead of ad-hoc shell scripts, and I found &lt;a href="https://www.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/"&gt;this guide&lt;/a&gt; to be incredibly helpful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Back to the migration, the first thing I did was to add babel to webpack using &lt;a href="https://github.com/babel/babel-loader"&gt;babel-loader&lt;/a&gt;.
It was easy to add to webpack and took almost no time to set up.
This meant that webpack would take our JavaScript files and transpile them from ES6 to "normal" JavaScript that all browsers can run.
However, in order to get our mocha tests running, it was necessary to hook
babel into our tests as well. I used &lt;a href="https://istanbul.js.org/docs/tutorials/es2015/"&gt;this guide&lt;/a&gt; from istanbul and was able to get them running fairly quickly.&lt;/p&gt;
&lt;p&gt;Once I ran the build and the tests and everything looked good, then it was time to really port our code to ES6.
First, it was necessary to port some code that was using the &lt;a href="http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html"&gt;module pattern&lt;/a&gt; to ES6 module syntax. I did this manually (using search/replace tools) and it took me a few hours.&lt;/p&gt;
&lt;p&gt;In some cases we had some ugly dependencies on globals so a bit of refactoring was required.
In cases where it wasn't possible, webpack has the &lt;a href="https://webpack.js.org/plugins/provide-plugin/"&gt;ProvidePlugin&lt;/a&gt;, which covers most cases.
I also found the &lt;a href="https://github.com/webpack-contrib/expose-loader"&gt;expose-loader&lt;/a&gt; to be useful becase we have some code not under our control that required jQuery to be a browser global.&lt;/p&gt;
&lt;p&gt;Once that was done, it was time to get started with the syntax changes.
I found an amazing tool for that, &lt;a href="https://lebab.io/"&gt;Lebab&lt;/a&gt;. It is a very realiable tool and I would totally use it again.
I ran all the "safe" transformations, verified them, and then ran some of the "unsafe" ones, checking how the code changed each time.&lt;/p&gt;
&lt;p&gt;Finally, I ran the build and our mocha tests to make sure they still passed.
The tests broke in a few places because of things like variables being shadowed because of the changes from &lt;code&gt;var&lt;/code&gt; to &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, with the help of the &lt;a href="https://eslint.org/docs/rules/no-shadow"&gt;no-shadow&lt;/a&gt; eslint rule, I was able to find all those cases quickly and get them fixed. ESLint was also very helpful in making sure I was not breaking any code with the refactoring I had to do.&lt;/p&gt;
&lt;p&gt;The lines of code initially went down because of the ES6 syntax sugar, but they went back up with the introduction of prettier and its opinionated formatting -- especially regarding line length.&lt;/p&gt;
&lt;p&gt;In the end, the migration was not as terrible as I initially thought it would be, and now it's a bit more enjoyable to work on that codebase.&lt;/p&gt;&lt;/div&gt;</description><category>es6</category><category>javascript</category><category>refactoring</category><category>webpack</category><guid>http://kaeruct.github.io/posts/migrating-old-style-javascript-code-to-es6.html</guid><pubDate>Thu, 28 Dec 2017 21:26:16 GMT</pubDate></item><item><title>Setting up sendmail to redirect emails</title><link>http://kaeruct.github.io/posts/setting-up-sendmail-to-redirect-emails.html</link><dc:creator>Andrés Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;small&gt;
  Disclaimer: the instructions below are for Ubuntu, but they should work for most distros,
  the biggest difference is that the configuration files might be located elsewhere.
&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;If you're like me, you have a main email address and other email addresses set up in other domains.&lt;/p&gt;
&lt;p&gt;I dislike having to check all my email addresses individually, so I set up my mail servers to redirect
all the email to my main address automatically.&lt;/p&gt;
&lt;p&gt;Sendmail has an aliases feature that makes this very simple to set up.&lt;/p&gt;
&lt;p&gt;Let's say you want to redirect emails this way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;webmaster@yourdomain.com&lt;/code&gt; -&amp;gt; &lt;code&gt;example@gmail.com, someoneelse@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help@yourdomain.com&lt;/code&gt; -&amp;gt; &lt;code&gt;helper@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;support@yourdomain.com&lt;/code&gt; -&amp;gt; &lt;code&gt;helper@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow these steps as root:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Change the &lt;code&gt;/etc/mail/aliases&lt;/code&gt; file to look like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; webmaster: example@gmail.com, someoneelse@gmail.com
 help: helper@gmail.com
 support: help
&lt;/pre&gt;


&lt;p&gt;As you can see, each line in the file matches an origin email to a destination email.
 Each line can reference previous entries as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After changing the file, run:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; $ newaliases
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure port 25 is open on your machine, so sendmail is able to listen for incoming email:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; $ iptables -A INPUT -p tcp --dport 25 -j ACCEPT
&lt;/pre&gt;


&lt;p&gt;Also make sure to save the iptables rules so they will be restored when the service restarts.
 This varies by distro, so it's better to google something like &lt;code&gt;iptables save &amp;lt;your distro&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change &lt;code&gt;/etc/mail/sendmail.mc&lt;/code&gt; so sendmail receives email from the outside world.&lt;/p&gt;
&lt;p&gt;Change this line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; DAEMON_OPTIONS(`Family=inet,  Name=MTA-v4, Port=smtp, Addr=127.0.0.1')dnl
&lt;/pre&gt;


&lt;p&gt;to&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; DAEMON_OPTIONS(`Family=inet,  Name=MTA-v4, Port=smtp')dnl
&lt;/pre&gt;


&lt;p&gt;We're not done modifying this file yet.
 Now we need to verify that the domain in the configuration matches your server's domain. If not, change it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; MASQUERADE_AS(`yourdomain.com')dnl
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After saving the file, you need to regenerate &lt;code&gt;sendmail.cf&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; m4 /etc/mail/sendmail.mc &amp;gt; /etc/mail/sendmail.cf
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your domain to &lt;code&gt;/etc/mail/local-host-names&lt;/code&gt;. This file has a domain per line.
    If your domain is not there, add it on a new line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart sendmail:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; $ /etc/init.d/sendmail restart
&lt;/pre&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Depending on the configuration of your email client or web UI, the emails might end up stuck in a spam folder,
so make sure to check there.&lt;/p&gt;
&lt;p&gt;If you use Gmail, you can make a filter to avoid sending your redirected emails to spam.
To do so:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do a search for &lt;code&gt;from:yourdomain.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click on "Create a filter with this search".&lt;/li&gt;
&lt;li&gt;Check the "Never send it to Spam" box.&lt;/li&gt;
&lt;li&gt;Click on "Create filter".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Preventing email from being sent to Spam" src="http://kaeruct.github.io/galleries/screenshots/nospamfilter.png"&gt;&lt;/p&gt;&lt;/div&gt;</description><category>email</category><category>linux</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/setting-up-sendmail-to-redirect-emails.html</guid><pubDate>Sat, 14 May 2016 16:33:44 GMT</pubDate></item><item><title>Generating partner.jar for Salesforce API Integration</title><link>http://kaeruct.github.io/posts/generating-partnerjar-for-salesforce-api-integration.html</link><dc:creator>Andrés Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;I ran into a small issue recently when setting up a Java project to use the
Salesforce APIs.&lt;/p&gt;
&lt;p&gt;Basically, you need to download a WSDL file from Salesforce, then use a tool made
by them to generate a jar that you then include in your Java program.&lt;/p&gt;
&lt;p&gt;They instruct you to &lt;a href="http://mvnrepository.com/artifact/com.force.api/force-wsc/"&gt;download &lt;code&gt;force-wsc.jar&lt;/code&gt;&lt;/a&gt; and then run it, but when
you run it you realize they didn't pack the dependencies within the jar!&lt;/p&gt;
&lt;p&gt;To solve this problem, you need to download the following jars:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mvnrepository.com/artifact/rhino/js/1.7R2"&gt;js-1.7R2.jar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mvnrepository.com/artifact/org.antlr/ST4/4.0.7"&gt;ST-4.0.7.jar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then run &lt;code&gt;force-wsc.jar&lt;/code&gt;, including the dependencies in the classpath:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ java -classpath force-wsc-32.1.1.jar:js-1.7R2.jar:ST-4.0.7.jar &lt;span class="se"&gt;\&lt;/span&gt;
  com.sforce.ws.tools.wsdlc partner.wsdl partner-32.1.1.jar
&lt;/pre&gt;


&lt;p&gt;Please note these were the versions that worked for me. If your &lt;code&gt;force-wsc.jar&lt;/code&gt; is
a different version, check if you need to include other version of its dependencies.&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/generating-partnerjar-for-salesforce-api-integration.html</guid><pubDate>Wed, 12 Nov 2014 02:12:38 GMT</pubDate></item><item><title>How to use the Youtube JS API to play music in the background</title><link>http://kaeruct.github.io/posts/how-to-use-the-youtube-js-api-to-play-music-in-the-background.html</link><dc:creator>Andrés Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;The Youtube JavaScript API allows you to embed YouTube videos and
interact with them programatically. To use it, first you need to embed this
script into your page:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;script src="http://www.youtube.com/player_api"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you just want the audio, you can hide the element that contains the video:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;div id="player" style="position: absolute; top: -9999px; left: -9999px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here we use absolute positioning with negative coordinates
because using &lt;code&gt;display: none;&lt;/code&gt; will prevent the &lt;code&gt;onReady&lt;/code&gt; handler
from the Youtube player from triggering on Firefox. I ran across this problem
when making &lt;a href="http://kaeru.neritic.net/projects/short-experiments/walk"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, here's &lt;a href="http://kaeruct.github.io/examples/yt-js-api"&gt;a full example&lt;/a&gt; that will wait for the video to
load and automatically play it:&lt;/p&gt;
&lt;script src="https://gist.github.com/KaeruCT/dcfae82a15af514ea95e.js"&gt;&lt;/script&gt;&lt;/div&gt;</description><category>javascript</category><category>tutorials</category><category>youtube</category><guid>http://kaeruct.github.io/posts/how-to-use-the-youtube-js-api-to-play-music-in-the-background.html</guid><pubDate>Fri, 23 May 2014 18:29:55 GMT</pubDate></item></channel></rss>