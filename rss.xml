<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Pejibaye Blog</title><link>http://kaeruct.github.io/</link><description>Fun and code</description><atom:link type="application/rss+xml" rel="self" href="http://kaeruct.github.io/rss.xml"></atom:link><language>en</language><lastBuildDate>Sat, 13 Apr 2019 23:35:55 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Starry Sky in HTML5 Canvas - Part 2</title><link>http://kaeruct.github.io/posts/starry-sky-in-html5-canvas-pt2.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;This is part of a series! Please make sure you have read &lt;a href="http://kaeruct.github.io/posts/starry-sky-in-html5-canvas-pt1.html"&gt;Part 1&lt;/a&gt; first!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; -- you can try out the result of this tutorial by visiting this &lt;a href="https://codesandbox.io/s/z68y1012yl?fontsize=14"&gt;CodeSandbox&lt;/a&gt;.
However, I encourage you to read the blog post and try to follow along to understand how and why it works.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Last time we left off with a very nice starry sky, but it's a bit dead. We need to add some animation to it!
The way animation is done on HTML5 canvas is by drawing something else every frame.&lt;/p&gt;
&lt;p&gt;For our case, we can use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame"&gt;&lt;code&gt;requestAnimationFrame() function&lt;/code&gt;&lt;/a&gt; to call our &lt;code&gt;render()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;First, we will add a &lt;code&gt;counter&lt;/code&gt; variable. We will increment this every time we draw.
This is useful because we will have a number that will change with every render.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then, we will update our &lt;code&gt;render()&lt;/code&gt; function so it uses &lt;code&gt;requestAnimationFrame()&lt;/code&gt;. We will also make it increment the counter.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"rgb(255, 255, 255)"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;For now, this will look exactly the same as before, because we always render the same thing. But let's begin to change that now.&lt;/p&gt;
&lt;p&gt;We'll make a small change to make the stars look like they're flickering.&lt;/p&gt;
&lt;p&gt;First, let's add a function to generate an opacity value. This value will go from 0 to 1 and will determine the opacity of our star.&lt;/p&gt;
&lt;p&gt;The use of &lt;code&gt;Math.sin()&lt;/code&gt; in the function below is just to make sure we get a value that changes smoothly.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minStarOpacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxStarOpacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opacityIncrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maxStarOpacity&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;minStarOpacity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;minStarOpacity&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;opacityIncrement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then, we will use this function when rendering our stars.
Also notice how we change the color from &lt;code&gt;rgb(255, 255, 255)&lt;/code&gt; to &lt;code&gt;rgba(255, 255, 255, opacity)&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// factor will be a different number for every star&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sb"&gt;`rgba(255, 255, 255, &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;opacity&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="Animated Starry Sky" src="http://kaeruct.github.io/galleries/screenshots/starry/flicker.gif"&gt;&lt;/p&gt;
&lt;p&gt;Now the sky is looking really nice and animated. But it's still missing a nice big &lt;code&gt;moon&lt;/code&gt;. Let's add it next.&lt;/p&gt;
&lt;p&gt;We will create a function to render our moon, and call it from &lt;code&gt;render()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"#fea"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderMoon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// render a smaller circle above the moon to give it that well-known moon-shape&lt;/span&gt;
  &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;moon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;And our updated &lt;code&gt;render()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getOpacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sb"&gt;`rgba(255, 255, 255, &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;opacity&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;renderMoon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;That leaves us with the finished product:
&lt;img alt="Animated Starry Sky with Moon" src="http://kaeruct.github.io/galleries/screenshots/starry/moon.gif"&gt;&lt;/p&gt;
&lt;p&gt;Thanks for following this tutorial to the end! Remember you can look at a working example in the &lt;a href="https://codesandbox.io/s/z68y1012yl?fontsize=14"&gt;CodeSandbox&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Have fun experimenting and tweaking the values used to render the stars and the moon.
Some ideas you may want to try to learn more and improve your skills:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make the stars more colorful.&lt;/li&gt;
&lt;li&gt;Make the moon move across the sky.&lt;/li&gt;
&lt;li&gt;Add shooting stars.&lt;/li&gt;
&lt;li&gt;Add a gradient background instead of a solid color.&lt;/li&gt;
&lt;li&gt;Add multiple moons.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don't hesitate to contact me at &lt;a href="http://twitter.com/KaeruCT"&gt;@KaeruCT&lt;/a&gt; if you have any questions, suggestions, or improvements for this tutorial!&lt;/p&gt;&lt;/div&gt;</description><category>canvas</category><category>javascript</category><category>programming-projects</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/starry-sky-in-html5-canvas-pt2.html</guid><pubDate>Sat, 13 Apr 2019 22:31:13 GMT</pubDate></item><item><title>Starry Sky in HTML5 Canvas - Part 1</title><link>http://kaeruct.github.io/posts/starry-sky-in-html5-canvas-pt1.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;In my spare time I often enjoy creating visualizations using HTML5 canvas.
I'm planning to do a little presentation about this so I thought a good way to get started was to create a blog post explaining how to do a simple one.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; -- you can try out the result of this tutorial by visiting this &lt;a href="https://codesandbox.io/s/kmrx1z6wn7?fontsize=14"&gt;CodeSandbox&lt;/a&gt;.
However, I encourage you to read the blog post and try to follow along to understand how and why it works.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, you will need an HTML file, let's name it &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Starry sky&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nt"&gt;canvas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;canvas&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"canvas"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Nothing crazy so far, just some styles and a &lt;code&gt;canvas&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;Next, let's create a JavaScript file. Let's name this &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"#030318"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#canvas"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2d"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;In the code above, we set the canvas' width and height so it takes up the whole window.
Then, in the &lt;code&gt;render()&lt;/code&gt; function, we fill the canvas with the background color.
If you run it on your browser, it will look like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Step 1" src="http://kaeruct.github.io/galleries/screenshots/starry/step1.png"&gt;&lt;/p&gt;
&lt;p&gt;Yup. Not very interesting. Let's put something in there!
Let's add some code to our &lt;code&gt;index.js&lt;/code&gt; file to draw some stars.&lt;/p&gt;
&lt;p&gt;First, let's have a function that creates the stars.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createStars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;spacing&lt;/code&gt; parameter will control the spacing between stars.&lt;/p&gt;
&lt;p&gt;Then, let's update our &lt;code&gt;render()&lt;/code&gt; function so it renders the stars.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"rgb(255, 255, 255)"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;For our purposes, a star is a circle, so we can use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc"&gt;&lt;code&gt;arc()&lt;/code&gt; function&lt;/a&gt; to draw our stars.
An explanation of the parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are used for the position.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; is used for the radius of the circle.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; and &lt;code&gt;Math.PI * 2&lt;/code&gt; are the start and end angle, respectively.
   A full circle goes from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;2pi&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The line &lt;code&gt;ctx.fillStyle = "rgb(255, 255, 255)";&lt;/code&gt; is used to set the color of the circle to white.&lt;/p&gt;
&lt;p&gt;Let's see what we get now:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Step 2" src="http://kaeruct.github.io/galleries/screenshots/starry/step2.png"&gt;&lt;/p&gt;
&lt;p&gt;It's definitely a bit more interesting. But it doesn't look like a starry sky at all!
Stars don't usually look so uniform and boring. We need to add some randomness.&lt;/p&gt;
&lt;p&gt;Let's create a function called &lt;code&gt;randomInt(max)&lt;/code&gt; that will return a random number:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then, let's use these random numbers when creating our stars:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createStars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="Step 3" src="http://kaeruct.github.io/galleries/screenshots/starry/step3.png"&gt;&lt;/p&gt;
&lt;p&gt;That looks already almost real! Now let's make it so the stars are different sizes.
To do this, we will need a different radius for each star, so we will add it to the star objects.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxStarRadius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createStars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;randomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;maxStarRadius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then, we will update the &lt;code&gt;render()&lt;/code&gt; function so it uses the star's radius when drawing.
While we're at it, let's extract the circle drawing logic to a new function as well.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fillStyle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fillStyle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fillCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"rgb(255, 255, 255)"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="Step 4" src="http://kaeruct.github.io/galleries/screenshots/starry/step4.png"&gt;&lt;/p&gt;
&lt;p&gt;Much better! Now the stars are all different sizes!&lt;/p&gt;
&lt;p&gt;This is all for part 1. You can continue reading &lt;a href="http://kaeruct.github.io/posts/starry-sky-in-html5-canvas-pt2.html"&gt;Part 2&lt;/a&gt;, where we will add a moon and make our stars flicker!&lt;/p&gt;&lt;/div&gt;</description><category>canvas</category><category>javascript</category><category>programming-projects</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/starry-sky-in-html5-canvas-pt1.html</guid><pubDate>Sat, 13 Apr 2019 21:35:56 GMT</pubDate></item><item><title>How to show preview images when sharing links of your website</title><link>http://kaeruct.github.io/posts/how-to-show-preview-images-when-sharing-links-of-your-website.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;When you share a link on social media or mesagging apps, sometimes the app shows a nice preview thumbnail with a description? You can click on it and it will take you to the linked website. I wanted to have this functionality for a website I was working on, so I did some research on how to get it working.&lt;/p&gt;
&lt;p&gt;Short answer: use the &lt;code&gt;og:image&lt;/code&gt; meta tag.&lt;/p&gt;
&lt;p&gt;Longer answer: read on.&lt;/p&gt;
&lt;p&gt;You have to use &lt;a href="https://ogp.me/"&gt;Open Graph&lt;/a&gt; meta tags.
There's a bunch of meta tags to use, but the ones you need for previews are the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"twitter:card"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"summary"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Thumbnail example"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Only for Nic Cage fans"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://www.placecage.com/c/460/300"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://kaeruct.github.io/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When a website with the previous tags is shared on social media, you will get a nice preview card with thumbnail, title, and description.&lt;/p&gt;
&lt;p&gt;Important points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You &lt;strong&gt;NEED&lt;/strong&gt; to include the &lt;code&gt;twitter:card&lt;/code&gt; meta tag for Twitter to display the preview. Otherwise it won't work. If you don't care about Twitter you can remove it.&lt;/li&gt;
&lt;li&gt;Some apps/websites will not include your preview thumbnail if it's not served via HTTPS. So make sure the image URLs always start with &lt;code&gt;https://&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;og:url&lt;/code&gt; value should point to the canonical URL of the page, not to the root of your website.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below you can see some examples:&lt;/p&gt;
&lt;h3&gt;Twitter&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Twitter" src="http://kaeruct.github.io/galleries/screenshots/og/twitter.png"&gt;&lt;/p&gt;
&lt;h3&gt;Slack&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Slack" src="http://kaeruct.github.io/galleries/screenshots/og/slack.png"&gt;&lt;/p&gt;
&lt;h3&gt;Telegram&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Telegram" src="http://kaeruct.github.io/galleries/screenshots/og/telegram.png"&gt; &lt;/p&gt;
&lt;h3&gt;WhatsApp&lt;/h3&gt;
&lt;p&gt;&lt;img alt="WhatsApp" src="http://kaeruct.github.io/galleries/screenshots/og/whatsapp.png"&gt;&lt;/p&gt;
&lt;h3&gt;Discord&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Discord" src="http://kaeruct.github.io/galleries/screenshots/og/discord.png"&gt;&lt;/p&gt;&lt;/div&gt;</description><category>html</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/how-to-show-preview-images-when-sharing-links-of-your-website.html</guid><pubDate>Sat, 13 Apr 2019 07:08:24 GMT</pubDate></item><item><title>Migrating old-style JavaScript code to ES6</title><link>http://kaeruct.github.io/posts/migrating-old-style-javascript-code-to-es6.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently (at work) I had to migrate a medium-sized JavaScript codebase (20KLOC) to &lt;a href="https://github.com/lukehoban/es6features"&gt;ES6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We wanted to migrate to take advantage of the new features such as arrow functions, destructuring, and classes (there are a bunch more!).
Additionally, I was tasked with introducing &lt;a href="https://eslint.org/"&gt;eslint&lt;/a&gt; and &lt;a href="https://prettier.io/"&gt;prettier&lt;/a&gt; to improve the quality of our code a bit more.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Before diving into the migration process, first I'd like to give some context on the state of the application.&lt;/p&gt;
&lt;p&gt;We already used &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; and &lt;a href="https://webpack.js.org/"&gt;webpack&lt;/a&gt; to build our frontend, so I thought the migration should be straightforward -- and it was.&lt;/p&gt;
&lt;p&gt;I was heavily involved in modifying our build process to use npm instead of ad-hoc shell scripts, and I found &lt;a href="https://www.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/"&gt;this guide&lt;/a&gt; to be incredibly helpful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Back to the migration, the first thing I did was to add babel to webpack using &lt;a href="https://github.com/babel/babel-loader"&gt;babel-loader&lt;/a&gt;.
It was easy to add to webpack and took almost no time to set up.
This meant that webpack would take our JavaScript files and transpile them from ES6 to "normal" JavaScript that all browsers can run.
However, in order to get our mocha tests running, it was necessary to hook
babel into our tests as well. I used &lt;a href="https://istanbul.js.org/docs/tutorials/es2015/"&gt;this guide&lt;/a&gt; from istanbul and was able to get them running fairly quickly.&lt;/p&gt;
&lt;p&gt;Once I ran the build and the tests and everything looked good, then it was time to really port our code to ES6.
First, it was necessary to port some code that was using the &lt;a href="http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html"&gt;module pattern&lt;/a&gt; to ES6 module syntax. I did this manually (using search/replace tools) and it took me a few hours.&lt;/p&gt;
&lt;p&gt;In some cases we had some ugly dependencies on globals so a bit of refactoring was required.
In cases where it wasn't possible, webpack has the &lt;a href="https://webpack.js.org/plugins/provide-plugin/"&gt;ProvidePlugin&lt;/a&gt;, which covers most cases.
I also found the &lt;a href="https://github.com/webpack-contrib/expose-loader"&gt;expose-loader&lt;/a&gt; to be useful becase we have some code not under our control that required jQuery to be a browser global.&lt;/p&gt;
&lt;p&gt;Once that was done, it was time to get started with the syntax changes.
I found an amazing tool for that, &lt;a href="https://lebab.io/"&gt;Lebab&lt;/a&gt;. It is a very realiable tool and I would totally use it again.
I ran all the "safe" transformations, verified them, and then ran some of the "unsafe" ones, checking how the code changed each time.&lt;/p&gt;
&lt;p&gt;Finally, I ran the build and our mocha tests to make sure they still passed.
The tests broke in a few places because of things like variables being shadowed because of the changes from &lt;code&gt;var&lt;/code&gt; to &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, with the help of the &lt;a href="https://eslint.org/docs/rules/no-shadow"&gt;no-shadow&lt;/a&gt; eslint rule, I was able to find all those cases quickly and get them fixed. ESLint was also very helpful in making sure I was not breaking any code with the refactoring I had to do.&lt;/p&gt;
&lt;p&gt;The lines of code initially went down because of the ES6 syntax sugar, but they went back up with the introduction of prettier and its opinionated formatting -- especially regarding line length.&lt;/p&gt;
&lt;p&gt;In the end, the migration was not as terrible as I initially thought it would be, and now it's a bit more enjoyable to work on that codebase.&lt;/p&gt;&lt;/div&gt;</description><category>es6</category><category>javascript</category><category>refactoring</category><category>webpack</category><guid>http://kaeruct.github.io/posts/migrating-old-style-javascript-code-to-es6.html</guid><pubDate>Thu, 28 Dec 2017 21:26:16 GMT</pubDate></item><item><title>Setting up sendmail to redirect emails</title><link>http://kaeruct.github.io/posts/setting-up-sendmail-to-redirect-emails.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;small&gt;
  Disclaimer: the instructions below are for Ubuntu, but they should work for most distros,
  the biggest difference is that the configuration files might be located elsewhere.
&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;If you're like me, you have a main email address and other email addresses set up in other domains.&lt;/p&gt;
&lt;p&gt;I dislike having to check all my email addresses individually, so I set up my mail servers to redirect
all the email to my main address automatically.&lt;/p&gt;
&lt;p&gt;Sendmail has an aliases feature that makes this very simple to set up.&lt;/p&gt;
&lt;p&gt;Let's say you want to redirect emails this way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;webmaster@yourdomain.com&lt;/code&gt; -&amp;gt; &lt;code&gt;example@gmail.com, someoneelse@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help@yourdomain.com&lt;/code&gt; -&amp;gt; &lt;code&gt;helper@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;support@yourdomain.com&lt;/code&gt; -&amp;gt; &lt;code&gt;helper@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow these steps as root:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Change the &lt;code&gt;/etc/mail/aliases&lt;/code&gt; file to look like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; webmaster: example@gmail.com, someoneelse@gmail.com
 help: helper@gmail.com
 support: help
&lt;/pre&gt;


&lt;p&gt;As you can see, each line in the file matches an origin email to a destination email.
 Each line can reference previous entries as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After changing the file, run:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; $ newaliases
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure port 25 is open on your machine, so sendmail is able to listen for incoming email:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; $ iptables -A INPUT -p tcp --dport 25 -j ACCEPT
&lt;/pre&gt;


&lt;p&gt;Also make sure to save the iptables rules so they will be restored when the service restarts.
 This varies by distro, so it's better to google something like &lt;code&gt;iptables save &amp;lt;your distro&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change &lt;code&gt;/etc/mail/sendmail.mc&lt;/code&gt; so sendmail receives email from the outside world.&lt;/p&gt;
&lt;p&gt;Change this line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; DAEMON_OPTIONS(`Family=inet,  Name=MTA-v4, Port=smtp, Addr=127.0.0.1')dnl
&lt;/pre&gt;


&lt;p&gt;to&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; DAEMON_OPTIONS(`Family=inet,  Name=MTA-v4, Port=smtp')dnl
&lt;/pre&gt;


&lt;p&gt;We're not done modifying this file yet.
 Now we need to verify that the domain in the configuration matches your server's domain. If not, change it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; MASQUERADE_AS(`yourdomain.com')dnl
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After saving the file, you need to regenerate &lt;code&gt;sendmail.cf&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; m4 /etc/mail/sendmail.mc &amp;gt; /etc/mail/sendmail.cf
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your domain to &lt;code&gt;/etc/mail/local-host-names&lt;/code&gt;. This file has a domain per line.
    If your domain is not there, add it on a new line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restart sendmail:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; $ /etc/init.d/sendmail restart
&lt;/pre&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Depending on the configuration of your email client or web UI, the emails might end up stuck in a spam folder,
so make sure to check there.&lt;/p&gt;
&lt;p&gt;If you use Gmail, you can make a filter to avoid sending your redirected emails to spam.
To do so:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Do a search for &lt;code&gt;from:yourdomain.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click on "Create a filter with this search".&lt;/li&gt;
&lt;li&gt;Check the "Never send it to Spam" box.&lt;/li&gt;
&lt;li&gt;Click on "Create filter".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Preventing email from being sent to Spam" src="http://kaeruct.github.io/galleries/screenshots/nospamfilter.png"&gt;&lt;/p&gt;&lt;/div&gt;</description><category>email</category><category>linux</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/setting-up-sendmail-to-redirect-emails.html</guid><pubDate>Sat, 14 May 2016 16:33:44 GMT</pubDate></item><item><title>Generating partner.jar for Salesforce API Integration</title><link>http://kaeruct.github.io/posts/generating-partnerjar-for-salesforce-api-integration.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;I ran into a small issue recently when setting up a Java project to use the
Salesforce APIs.&lt;/p&gt;
&lt;p&gt;Basically, you need to download a WSDL file from Salesforce, then use a tool made
by them to generate a jar that you then include in your Java program.&lt;/p&gt;
&lt;p&gt;They instruct you to &lt;a href="http://mvnrepository.com/artifact/com.force.api/force-wsc/"&gt;download &lt;code&gt;force-wsc.jar&lt;/code&gt;&lt;/a&gt; and then run it, but when
you run it you realize they didn't pack the dependencies within the jar!&lt;/p&gt;
&lt;p&gt;To solve this problem, you need to download the following jars:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mvnrepository.com/artifact/rhino/js/1.7R2"&gt;js-1.7R2.jar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mvnrepository.com/artifact/org.antlr/ST4/4.0.7"&gt;ST-4.0.7.jar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then run &lt;code&gt;force-wsc.jar&lt;/code&gt;, including the dependencies in the classpath:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ java -classpath force-wsc-32.1.1.jar:js-1.7R2.jar:ST-4.0.7.jar &lt;span class="se"&gt;\&lt;/span&gt;
  com.sforce.ws.tools.wsdlc partner.wsdl partner-32.1.1.jar
&lt;/pre&gt;


&lt;p&gt;Please note these were the versions that worked for me. If your &lt;code&gt;force-wsc.jar&lt;/code&gt; is
a different version, check if you need to include other version of its dependencies.&lt;/p&gt;&lt;/div&gt;</description><category>java</category><category>tutorials</category><guid>http://kaeruct.github.io/posts/generating-partnerjar-for-salesforce-api-integration.html</guid><pubDate>Wed, 12 Nov 2014 02:12:38 GMT</pubDate></item><item><title>How to use the Youtube JS API to play music in the background</title><link>http://kaeruct.github.io/posts/how-to-use-the-youtube-js-api-to-play-music-in-the-background.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;The Youtube JavaScript API allows you to embed YouTube videos and
interact with them programatically. To use it, first you need to embed this
script into your page:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;script src="http://www.youtube.com/player_api"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you just want the audio, you can hide the element that contains the video:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;div id="player" style="position: absolute; top: -9999px; left: -9999px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here we use absolute positioning with negative coordinates
because using &lt;code&gt;display: none;&lt;/code&gt; will prevent the &lt;code&gt;onReady&lt;/code&gt; handler
from the Youtube player from triggering on Firefox. I ran across this problem
when making &lt;a href="http://kaeru.neritic.net/projects/short-experiments/walk"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, here's &lt;a href="http://kaeruct.github.io/examples/yt-js-api"&gt;a full example&lt;/a&gt; that will wait for the video to
load and automatically play it:&lt;/p&gt;
&lt;script src="https://gist.github.com/KaeruCT/dcfae82a15af514ea95e.js"&gt;&lt;/script&gt;&lt;/div&gt;</description><category>javascript</category><category>tutorials</category><category>youtube</category><guid>http://kaeruct.github.io/posts/how-to-use-the-youtube-js-api-to-play-music-in-the-background.html</guid><pubDate>Fri, 23 May 2014 18:29:55 GMT</pubDate></item><item><title>Learning a Programming Language</title><link>http://kaeruct.github.io/posts/learning-a-programming-language.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;I've heard that if you're a good programmer, you should be able to pick up a
new language in a few days. And I've done this myself, I learned the basics of
Go a few months ago. Built some command line programs and a web app with it,
all in a few days.&lt;/p&gt;
&lt;p&gt;Yet, what does it take to &lt;strong&gt;really&lt;/strong&gt; learn a new language? To master it? Sure,
there are some concepts that translate well from language to language, but some
languages have their own thing going on. It usually takes a little longer to
even learn the basics of those languages.&lt;/p&gt;
&lt;p&gt;To go beyond the basic concepts, you have to invest a lot of time into the
language. You have to learn how to program idiomatically in it. I wouldn't go
as far as saying that you have to spend 10,000 hours practicing a language, but
I do think you have to spend at least a thousand hours to know it really well.&lt;/p&gt;
&lt;p&gt;On top of that, most languages have a whole ecosystem of associated tools that
you have to leverage in order to be productive. For example, JavaScript has
&lt;a href="http://gruntjs.com/"&gt;Grunt&lt;/a&gt; (&lt;a href="http://gulpjs.com/"&gt;Gulp&lt;/a&gt; seems to follow),
&lt;a href="http://bower.io/"&gt;Bower&lt;/a&gt;, and &lt;a href="http://www.npmjs.org/"&gt;NPM&lt;/a&gt; (and
&lt;a href="http://yeoman.io/"&gt;Yeoman&lt;/a&gt; most recently). You can't really say you have
mastered JavaScript if you don't know how to use these tools.&lt;/p&gt;
&lt;p&gt;So after learning the language and learning all these tools, you must be a
master in this language, right? Well, you're wrong. You see, most languages
(even the unpopular ones) have something else associated with it: a community.
Sometimes the community is really visible (for example, the &lt;a href="http://www.python.org/community/"&gt;Python
community&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If you want to truly master a language, you should be part of its community.
The community influences the language in many ways. Usually, the community
influences the tools, new language features, libraries, frameworks, and so on.
So if you have invested yourself into a language, you should also become part
of the community.&lt;/p&gt;
&lt;p&gt;Now you have accomplished all of the above: you have spent quite a few hours
programming in the language, you have a broad knowledge of all its tools, and
you're part of the community. Is that enough? No! You have to keep up to date,
learning (or proposing) new features, tools, learning new libraries and
frameworks. You could even build some of those yourself!&lt;/p&gt;
&lt;p&gt;Finally, note that you don't have to do all this. If you really like a
language, go ahead. I believe it is worth the effort. Yet, I don't consider
myself a master of any language. There's just way too much to learn and to do.
I prefer having enough knowledge in a few languages and getting things done in
them, than to be a &lt;em&gt;PHP Guru&lt;/em&gt; or &lt;em&gt;JavaScript Wizard&lt;/em&gt;. I advise you do the same.&lt;/p&gt;&lt;/div&gt;</description><category>ramblings</category><guid>http://kaeruct.github.io/posts/learning-a-programming-language.html</guid><pubDate>Fri, 14 Feb 2014 15:14:19 GMT</pubDate></item><item><title>Go Learn</title><link>http://kaeruct.github.io/posts/go-learn.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;Today I decided to try out &lt;a href="http://golang.org/"&gt;Go&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;What is Go?&lt;/h3&gt;
&lt;p&gt;Go is a programming language designed and developed at Google.
It was designed by really smart people: Robert Griesemer,
Rob Pike, and Ken Thompson.&lt;/p&gt;
&lt;p&gt;Syntax-wise, it looks a lot like C, except the ending semicolons
are optional, and parentheses for &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, etc are not required.&lt;/p&gt;
&lt;p&gt;Here's a gist showing some syntax:
&lt;script src="https://gist.github.com/KaeruCT/6488745.js"&gt;&lt;/script&gt;
It's a fibonacci calculator made using a closure, caching previously calculated numbers.&lt;/p&gt;
&lt;h3&gt;Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Statically typed (but types can be inferred).&lt;/li&gt;
&lt;li&gt;Concurrency baked in (goroutines, channels).&lt;/li&gt;
&lt;li&gt;Garbage collection.&lt;/li&gt;
&lt;li&gt;Fast compile times.&lt;/li&gt;
&lt;li&gt;No classes (you attach functions to structs instead).&lt;/li&gt;
&lt;li&gt;No inheritance (Go makes heavy use of interfaces).&lt;/li&gt;
&lt;li&gt;No overloading.&lt;/li&gt;
&lt;li&gt;No pointer arithmetic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Coding in Go&lt;/h3&gt;
&lt;p&gt;To learn Go, I first did a quick read of
&lt;a href="http://learnxinyminutes.com/docs/go/"&gt;Learn X in Y Minutes&lt;/a&gt; to get
a grip of the syntax.&lt;/p&gt;
&lt;p&gt;Then, I went over to their official website and took the &lt;a href="http://tour.golang.org/"&gt;tour&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Afterwards, I wanted to get a working application. Go includes an
http server in their official packages, so I decided to make a
web application.&lt;/p&gt;
&lt;p&gt;After a little searching, I found they had a &lt;a href="http://golang.org/doc/articles/wiki/"&gt;tutorial&lt;/a&gt;
aimed at web applications, so I decided to use exactly that.
Go documentation rocks!&lt;/p&gt;
&lt;p&gt;I followed the tutorial along and was able to get a wiki type of website
up and running in about 20 minutes. After that, I decided I wanted
to add markdown support to it, and a few more features, like creating
new pages and deleting pages.&lt;/p&gt;
&lt;p&gt;One thing I really liked about Go is that it comes with a lot of useful packages
so you can start working right away. For example, I thought I would have
to write some sort of templating system, but Go already comes with one.
And it's context aware! So you don't have to worry about escaping things!&lt;/p&gt;
&lt;h3&gt;Packages&lt;/h3&gt;
&lt;p&gt;Go's packaging system allows you to get packages from VCS repositories.
For example, to add markdown support to my wiki, I added
&lt;a href="https://github.com/knieriem/markdown"&gt;knieriem's markdown package&lt;/a&gt; as a git
submodule in my project.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kaeruct.github.io/galleries/learning-go/"&gt;
    &lt;img width="540px" class="thumbnail" src="http://kaeruct.github.io/galleries/learning-go/learning-go1.png"&gt;
    &lt;center&gt;A screenshot of my development process. Click to see the gallery.&lt;/center&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As usual, my project is on &lt;a href="https://github.com/KaeruCT/go-learn"&gt;Github&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>golang</category><category>programming-projects</category><guid>http://kaeruct.github.io/posts/go-learn.html</guid><pubDate>Sun, 08 Sep 2013 22:33:11 GMT</pubDate></item><item><title>Trying out Ruby on Rails</title><link>http://kaeruct.github.io/posts/trying-out-ruby-on-rails.html</link><dc:creator>Andres Villarreal</dc:creator><description>&lt;div&gt;&lt;p&gt;I've heard a lot of stuff about RoR for a while, so I decided to finally
try it out and see what all the fuss is about.&lt;/p&gt;
&lt;p&gt;What is Ruby on Rails? A web framework that runs on the Ruby programming language.&lt;/p&gt;
&lt;p&gt;First impressions: too much magic going on. It seems like a good thing for quick
development, but I prefer knowing exactly what is going on in case anything
goes wrong so the problem can be fixed easily. For this reason, I probably will not use RoR
on any on my projects until I understand more about it.&lt;/p&gt;
&lt;p&gt;Things I liked about RoR: the ActiveRecord ORM, and the built-in REST support.
I also liked that it is very easy to deploy once you know what you're doing.&lt;/p&gt;
&lt;p&gt;Thinks I dislike so far: using SCSS and Coffeescript by default.
These could add to the cognitive load of beginner, and they have to wrap their
head around how RoR first has to process these files into what the browser
can understand (CSS y JavaScript, respectively).&lt;/p&gt;
&lt;p&gt;I've never been a big fan of Coffeescript. I think it's annoying to debug
and I would rather write plain JavaScript, but that's just my opinion. However, I do think
it has a nice syntax.&lt;/p&gt;
&lt;p&gt;I had heard of SCSS, but I had never used it. It's very enjoyable to use, since you
can nest CSS definitions, and it has some neat features that make it a lot easier
to maintain stylesheets, such as variables and functions.&lt;/p&gt;
&lt;p&gt;When learning a new framework, I try to follow the official tutorial,
but tweaking the steps a bit in order to create a different application.&lt;/p&gt;
&lt;p&gt;To learn RoR, I decided to make a small contacts application, where you can add contacts to a list
and edit/delete them. &lt;a href="https://github.com/KaeruCT/learning-rails-contacts-app"&gt;It's on a repo at Github&lt;/a&gt;,
in case you wanna take a look.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kaeruct.github.io/galleries/learning-rails/"&gt;
    &lt;img width="540px" class="thumbnail" src="http://kaeruct.github.io/galleries/learning-rails/screenshot.png"&gt;
    &lt;center&gt;A screenshot of my development process. Click to see the gallery.&lt;/center&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now I'm also learning Django (a python web framework), and everything seems a lot less magical,
so I will probably use it instead of RoR.
Both of them seem to solve the same problem (CRUD apps).&lt;/p&gt;&lt;/div&gt;</description><category>programming-projects</category><category>ruby</category><guid>http://kaeruct.github.io/posts/trying-out-ruby-on-rails.html</guid><pubDate>Sun, 30 Jun 2013 06:21:53 GMT</pubDate></item></channel></rss>